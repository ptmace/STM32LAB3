
LAB3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d54  08002d54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d54  08002d54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d54  08002d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d54  08002d54  00012d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002dcc  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c3e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8b  00000000  00000000  00029cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017320  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f002  00000000  00000000  00044168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008267d  00000000  00000000  0005316a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d57e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  000d583c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d18 	.word	0x08002d18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d18 	.word	0x08002d18

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[N0_OF_BUTTONS] = {0};
int button_long_pressed[N0_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1)
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <isButtonPressed+0x24>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d101      	bne.n	8000164 <isButtonPressed+0x18>
		return 1;
 8000160:	2301      	movs	r3, #1
 8000162:	e000      	b.n	8000166 <isButtonPressed+0x1a>
	return 0;
 8000164:	2300      	movs	r3, #0
}
 8000166:	4618      	mov	r0, r3
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	2000008c 	.word	0x2000008c

08000174 <subKeyProcess>:
	if(button_long_pressed[index] == 1)
		return 1;
	return 0;
}

void subKeyProcess(){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000178:	2120      	movs	r1, #32
 800017a:	4802      	ldr	r0, [pc, #8]	; (8000184 <subKeyProcess+0x10>)
 800017c:	f001 fdcf 	bl	8001d1e <HAL_GPIO_TogglePin>
}
 8000180:	bf00      	nop
 8000182:	bd80      	pop	{r7, pc}
 8000184:	40010800 	.word	0x40010800

08000188 <getKeyInput>:
void getKeyInput(){
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 800018e:	2300      	movs	r3, #0
 8000190:	607b      	str	r3, [r7, #4]
 8000192:	e012      	b.n	80001ba <getKeyInput+0x32>
		KeyReg2[i] = KeyReg1[i];
 8000194:	4a45      	ldr	r2, [pc, #276]	; (80002ac <getKeyInput+0x124>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800019c:	4944      	ldr	r1, [pc, #272]	; (80002b0 <getKeyInput+0x128>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001a4:	4a43      	ldr	r2, [pc, #268]	; (80002b4 <getKeyInput+0x12c>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ac:	493f      	ldr	r1, [pc, #252]	; (80002ac <getKeyInput+0x124>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	3301      	adds	r3, #1
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b02      	cmp	r3, #2
 80001be:	dde9      	ble.n	8000194 <getKeyInput+0xc>
	}
	KeyReg0[0] = HAL_GPIO_ReadPin(BTN_0_GPIO_Port, BTN_0_Pin);
 80001c0:	2140      	movs	r1, #64	; 0x40
 80001c2:	483d      	ldr	r0, [pc, #244]	; (80002b8 <getKeyInput+0x130>)
 80001c4:	f001 fd7c 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	461a      	mov	r2, r3
 80001cc:	4b39      	ldr	r3, [pc, #228]	; (80002b4 <getKeyInput+0x12c>)
 80001ce:	601a      	str	r2, [r3, #0]
	KeyReg0[1] = HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin);
 80001d0:	2180      	movs	r1, #128	; 0x80
 80001d2:	4839      	ldr	r0, [pc, #228]	; (80002b8 <getKeyInput+0x130>)
 80001d4:	f001 fd74 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80001d8:	4603      	mov	r3, r0
 80001da:	461a      	mov	r2, r3
 80001dc:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <getKeyInput+0x12c>)
 80001de:	605a      	str	r2, [r3, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin);
 80001e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001e4:	4834      	ldr	r0, [pc, #208]	; (80002b8 <getKeyInput+0x130>)
 80001e6:	f001 fd6b 	bl	8001cc0 <HAL_GPIO_ReadPin>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <getKeyInput+0x12c>)
 80001f0:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < N0_OF_BUTTONS; i++){
 80001f2:	2300      	movs	r3, #0
 80001f4:	603b      	str	r3, [r7, #0]
 80001f6:	e050      	b.n	800029a <getKeyInput+0x112>
		if((KeyReg1[i] == KeyReg0[i]) && (KeyReg2[i] == KeyReg1[i])){
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <getKeyInput+0x124>)
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	492c      	ldr	r1, [pc, #176]	; (80002b4 <getKeyInput+0x12c>)
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d143      	bne.n	8000294 <getKeyInput+0x10c>
 800020c:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <getKeyInput+0x128>)
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4925      	ldr	r1, [pc, #148]	; (80002ac <getKeyInput+0x124>)
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021c:	429a      	cmp	r2, r3
 800021e:	d139      	bne.n	8000294 <getKeyInput+0x10c>
			if(KeyReg2[i] != KeyReg3[i]){
 8000220:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <getKeyInput+0x128>)
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	4924      	ldr	r1, [pc, #144]	; (80002bc <getKeyInput+0x134>)
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000230:	429a      	cmp	r2, r3
 8000232:	d017      	beq.n	8000264 <getKeyInput+0xdc>
				KeyReg3[i] = KeyReg2[i];
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <getKeyInput+0x128>)
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	491f      	ldr	r1, [pc, #124]	; (80002bc <getKeyInput+0x134>)
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if(KeyReg3[i] == PRESSED_STATE){
 8000244:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <getKeyInput+0x134>)
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d121      	bne.n	8000294 <getKeyInput+0x10c>
					TimeOutForKeyPress = 500;
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <getKeyInput+0x138>)
 8000252:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000256:	601a      	str	r2, [r3, #0]
					button_flag[i] = 1;
 8000258:	4a1a      	ldr	r2, [pc, #104]	; (80002c4 <getKeyInput+0x13c>)
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2101      	movs	r1, #1
 800025e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000262:	e017      	b.n	8000294 <getKeyInput+0x10c>
				}
			}
			else{
				TimeOutForKeyPress--;
 8000264:	4b16      	ldr	r3, [pc, #88]	; (80002c0 <getKeyInput+0x138>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	3b01      	subs	r3, #1
 800026a:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <getKeyInput+0x138>)
 800026c:	6013      	str	r3, [r2, #0]
				if(TimeOutForKeyPress == 0){
 800026e:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <getKeyInput+0x138>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d10e      	bne.n	8000294 <getKeyInput+0x10c>
					TimeOutForKeyPress = 500;
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <getKeyInput+0x138>)
 8000278:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800027c:	601a      	str	r2, [r3, #0]

					if(KeyReg3[i] == PRESSED_STATE){
 800027e:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <getKeyInput+0x134>)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d104      	bne.n	8000294 <getKeyInput+0x10c>
						button_flag[i] = 1;
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <getKeyInput+0x13c>)
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	2101      	movs	r1, #1
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < N0_OF_BUTTONS; i++){
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	3301      	adds	r3, #1
 8000298:	603b      	str	r3, [r7, #0]
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	2b02      	cmp	r3, #2
 800029e:	ddab      	ble.n	80001f8 <getKeyInput+0x70>
					}
				}
			}
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000000c 	.word	0x2000000c
 80002b0:	20000018 	.word	0x20000018
 80002b4:	20000000 	.word	0x20000000
 80002b8:	40010800 	.word	0x40010800
 80002bc:	20000024 	.word	0x20000024
 80002c0:	20000030 	.word	0x20000030
 80002c4:	2000008c 	.word	0x2000008c

080002c8 <fsm_automatic>:
	if(timer_flag[0]){
		blinkingLed(status);
		setTimer(0, 50);
	}
}
void fsm_automatic(){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
	int fre_amber;
	int fre_green;

	switch(status){
 80002ce:	4b88      	ldr	r3, [pc, #544]	; (80004f0 <fsm_automatic+0x228>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b08      	cmp	r3, #8
 80002d4:	f200 81ee 	bhi.w	80006b4 <fsm_automatic+0x3ec>
 80002d8:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <fsm_automatic+0x18>)
 80002da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002de:	bf00      	nop
 80002e0:	08000305 	.word	0x08000305
 80002e4:	080006b5 	.word	0x080006b5
 80002e8:	080006b5 	.word	0x080006b5
 80002ec:	080006b5 	.word	0x080006b5
 80002f0:	080006b5 	.word	0x080006b5
 80002f4:	08000357 	.word	0x08000357
 80002f8:	08000423 	.word	0x08000423
 80002fc:	08000521 	.word	0x08000521
 8000300:	080005eb 	.word	0x080005eb
		case INIT:
			subKeyProcess();
 8000304:	f7ff ff36 	bl	8000174 <subKeyProcess>
			status = RED_GREEN;
 8000308:	4b79      	ldr	r3, [pc, #484]	; (80004f0 <fsm_automatic+0x228>)
 800030a:	2205      	movs	r2, #5
 800030c:	601a      	str	r2, [r3, #0]
			setTimer(1, 300);
 800030e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000312:	2001      	movs	r0, #1
 8000314:	f001 f830 	bl	8001378 <setTimer>
			setTimer(0, 1);
 8000318:	2101      	movs	r1, #1
 800031a:	2000      	movs	r0, #0
 800031c:	f001 f82c 	bl	8001378 <setTimer>
			clearAllLed();
 8000320:	f001 f8fc 	bl	800151c <clearAllLed>
			red = max_red;
 8000324:	4b73      	ldr	r3, [pc, #460]	; (80004f4 <fsm_automatic+0x22c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a73      	ldr	r2, [pc, #460]	; (80004f8 <fsm_automatic+0x230>)
 800032a:	6013      	str	r3, [r2, #0]
			amber = max_amber;
 800032c:	4b73      	ldr	r3, [pc, #460]	; (80004fc <fsm_automatic+0x234>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a73      	ldr	r2, [pc, #460]	; (8000500 <fsm_automatic+0x238>)
 8000332:	6013      	str	r3, [r2, #0]
			green = max_green;
 8000334:	4b73      	ldr	r3, [pc, #460]	; (8000504 <fsm_automatic+0x23c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a73      	ldr	r2, [pc, #460]	; (8000508 <fsm_automatic+0x240>)
 800033a:	6013      	str	r3, [r2, #0]
			temp_red = max_red;
 800033c:	4b6d      	ldr	r3, [pc, #436]	; (80004f4 <fsm_automatic+0x22c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a72      	ldr	r2, [pc, #456]	; (800050c <fsm_automatic+0x244>)
 8000342:	6013      	str	r3, [r2, #0]
			temp_amber = max_amber;
 8000344:	4b6d      	ldr	r3, [pc, #436]	; (80004fc <fsm_automatic+0x234>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a71      	ldr	r2, [pc, #452]	; (8000510 <fsm_automatic+0x248>)
 800034a:	6013      	str	r3, [r2, #0]
			temp_green = max_green;
 800034c:	4b6d      	ldr	r3, [pc, #436]	; (8000504 <fsm_automatic+0x23c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a70      	ldr	r2, [pc, #448]	; (8000514 <fsm_automatic+0x24c>)
 8000352:	6013      	str	r3, [r2, #0]
			break;
 8000354:	e1b7      	b.n	80006c6 <fsm_automatic+0x3fe>
		case RED_GREEN:
			led_red_green();
 8000356:	f001 f905 	bl	8001564 <led_red_green>
			if(timer_flag[0]){
 800035a:	4b6f      	ldr	r3, [pc, #444]	; (8000518 <fsm_automatic+0x250>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d01b      	beq.n	800039a <fsm_automatic+0xd2>
				displayLED7SEG(red, 0);
 8000362:	4b65      	ldr	r3, [pc, #404]	; (80004f8 <fsm_automatic+0x230>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2100      	movs	r1, #0
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fe0f 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(green, 1);
 800036e:	4b66      	ldr	r3, [pc, #408]	; (8000508 <fsm_automatic+0x240>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2101      	movs	r1, #1
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fe09 	bl	8000f8c <displayLED7SEG>

				--red;
 800037a:	4b5f      	ldr	r3, [pc, #380]	; (80004f8 <fsm_automatic+0x230>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3b01      	subs	r3, #1
 8000380:	4a5d      	ldr	r2, [pc, #372]	; (80004f8 <fsm_automatic+0x230>)
 8000382:	6013      	str	r3, [r2, #0]
				--green;
 8000384:	4b60      	ldr	r3, [pc, #384]	; (8000508 <fsm_automatic+0x240>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a5f      	ldr	r2, [pc, #380]	; (8000508 <fsm_automatic+0x240>)
 800038c:	6013      	str	r3, [r2, #0]
				controlTime_led();
 800038e:	f001 f929 	bl	80015e4 <controlTime_led>

				setTimer(0, 100);
 8000392:	2164      	movs	r1, #100	; 0x64
 8000394:	2000      	movs	r0, #0
 8000396:	f000 ffef 	bl	8001378 <setTimer>
			}
			if(timer_flag[1]){
 800039a:	4b5f      	ldr	r3, [pc, #380]	; (8000518 <fsm_automatic+0x250>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d00e      	beq.n	80003c0 <fsm_automatic+0xf8>
				status = RED_AMBER;
 80003a2:	4b53      	ldr	r3, [pc, #332]	; (80004f0 <fsm_automatic+0x228>)
 80003a4:	2206      	movs	r2, #6
 80003a6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80003a8:	f001 f8b8 	bl	800151c <clearAllLed>
				fre_amber = amber*100;
 80003ac:	4b54      	ldr	r3, [pc, #336]	; (8000500 <fsm_automatic+0x238>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	2264      	movs	r2, #100	; 0x64
 80003b2:	fb02 f303 	mul.w	r3, r2, r3
 80003b6:	603b      	str	r3, [r7, #0]
				setTimer(1, fre_amber);
 80003b8:	6839      	ldr	r1, [r7, #0]
 80003ba:	2001      	movs	r0, #1
 80003bc:	f000 ffdc 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 80003c0:	2001      	movs	r0, #1
 80003c2:	f7ff fec3 	bl	800014c <isButtonPressed>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d016      	beq.n	80003fa <fsm_automatic+0x132>
				status = MAN_RED_GREEN;
 80003cc:	4b48      	ldr	r3, [pc, #288]	; (80004f0 <fsm_automatic+0x228>)
 80003ce:	2209      	movs	r2, #9
 80003d0:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 80003d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 ffce 	bl	8001378 <setTimer>
				clearAllLed();
 80003dc:	f001 f89e 	bl	800151c <clearAllLed>
				red = 10;
 80003e0:	4b45      	ldr	r3, [pc, #276]	; (80004f8 <fsm_automatic+0x230>)
 80003e2:	220a      	movs	r2, #10
 80003e4:	601a      	str	r2, [r3, #0]
				green = 10;
 80003e6:	4b48      	ldr	r3, [pc, #288]	; (8000508 <fsm_automatic+0x240>)
 80003e8:	220a      	movs	r2, #10
 80003ea:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 80003ec:	4b4b      	ldr	r3, [pc, #300]	; (800051c <fsm_automatic+0x254>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 80003f2:	2101      	movs	r1, #1
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 ffbf 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 80003fa:	2000      	movs	r0, #0
 80003fc:	f7ff fea6 	bl	800014c <isButtonPressed>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	f000 8158 	beq.w	80006b8 <fsm_automatic+0x3f0>
				status = MODE_2;
 8000408:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <fsm_automatic+0x228>)
 800040a:	2202      	movs	r2, #2
 800040c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800040e:	f001 f885 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 8000412:	2101      	movs	r1, #1
 8000414:	2000      	movs	r0, #0
 8000416:	f000 ffaf 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 800041a:	4b40      	ldr	r3, [pc, #256]	; (800051c <fsm_automatic+0x254>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000420:	e14a      	b.n	80006b8 <fsm_automatic+0x3f0>
		case RED_AMBER:
			led_red_amber();
 8000422:	f001 f8af 	bl	8001584 <led_red_amber>
			if(timer_flag[0]){
 8000426:	4b3c      	ldr	r3, [pc, #240]	; (8000518 <fsm_automatic+0x250>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01b      	beq.n	8000466 <fsm_automatic+0x19e>
				displayLED7SEG(red, 0);
 800042e:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <fsm_automatic+0x230>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fda9 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(amber, 1);
 800043a:	4b31      	ldr	r3, [pc, #196]	; (8000500 <fsm_automatic+0x238>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2101      	movs	r1, #1
 8000440:	4618      	mov	r0, r3
 8000442:	f000 fda3 	bl	8000f8c <displayLED7SEG>

				--red;
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <fsm_automatic+0x230>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3b01      	subs	r3, #1
 800044c:	4a2a      	ldr	r2, [pc, #168]	; (80004f8 <fsm_automatic+0x230>)
 800044e:	6013      	str	r3, [r2, #0]
				--amber;
 8000450:	4b2b      	ldr	r3, [pc, #172]	; (8000500 <fsm_automatic+0x238>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	3b01      	subs	r3, #1
 8000456:	4a2a      	ldr	r2, [pc, #168]	; (8000500 <fsm_automatic+0x238>)
 8000458:	6013      	str	r3, [r2, #0]
				controlTime_led();
 800045a:	f001 f8c3 	bl	80015e4 <controlTime_led>

				setTimer(0, 100);
 800045e:	2164      	movs	r1, #100	; 0x64
 8000460:	2000      	movs	r0, #0
 8000462:	f000 ff89 	bl	8001378 <setTimer>
			}
			if(timer_flag[1]){
 8000466:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <fsm_automatic+0x250>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d00e      	beq.n	800048c <fsm_automatic+0x1c4>
				status = GREEN_RED;
 800046e:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <fsm_automatic+0x228>)
 8000470:	2207      	movs	r2, #7
 8000472:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000474:	f001 f852 	bl	800151c <clearAllLed>
				fre_green = green*100;
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <fsm_automatic+0x240>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2264      	movs	r2, #100	; 0x64
 800047e:	fb02 f303 	mul.w	r3, r2, r3
 8000482:	607b      	str	r3, [r7, #4]
				setTimer(1, fre_green);
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	2001      	movs	r0, #1
 8000488:	f000 ff76 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 800048c:	2001      	movs	r0, #1
 800048e:	f7ff fe5d 	bl	800014c <isButtonPressed>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d016      	beq.n	80004c6 <fsm_automatic+0x1fe>
				status = MAN_RED_AMBER;
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <fsm_automatic+0x228>)
 800049a:	220a      	movs	r2, #10
 800049c:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 800049e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 ff68 	bl	8001378 <setTimer>
				clearAllLed();
 80004a8:	f001 f838 	bl	800151c <clearAllLed>
				red = 10;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <fsm_automatic+0x230>)
 80004ae:	220a      	movs	r2, #10
 80004b0:	601a      	str	r2, [r3, #0]
				amber = 10;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <fsm_automatic+0x238>)
 80004b4:	220a      	movs	r2, #10
 80004b6:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <fsm_automatic+0x254>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 80004be:	2101      	movs	r1, #1
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 ff59 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 80004c6:	2000      	movs	r0, #0
 80004c8:	f7ff fe40 	bl	800014c <isButtonPressed>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 80f4 	beq.w	80006bc <fsm_automatic+0x3f4>
				status = MODE_2;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <fsm_automatic+0x228>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80004da:	f001 f81f 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 80004de:	2101      	movs	r1, #1
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 ff49 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <fsm_automatic+0x254>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
			}
			break;
 80004ec:	e0e6      	b.n	80006bc <fsm_automatic+0x3f4>
 80004ee:	bf00      	nop
 80004f0:	20000098 	.word	0x20000098
 80004f4:	2000004c 	.word	0x2000004c
 80004f8:	20000034 	.word	0x20000034
 80004fc:	20000050 	.word	0x20000050
 8000500:	20000038 	.word	0x20000038
 8000504:	20000054 	.word	0x20000054
 8000508:	2000003c 	.word	0x2000003c
 800050c:	20000040 	.word	0x20000040
 8000510:	20000044 	.word	0x20000044
 8000514:	20000048 	.word	0x20000048
 8000518:	2000009c 	.word	0x2000009c
 800051c:	2000008c 	.word	0x2000008c
		case GREEN_RED:
			led_green_red();
 8000520:	f001 f840 	bl	80015a4 <led_green_red>
			if(timer_flag[0]){
 8000524:	4b6a      	ldr	r3, [pc, #424]	; (80006d0 <fsm_automatic+0x408>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01b      	beq.n	8000564 <fsm_automatic+0x29c>
				displayLED7SEG(green, 0);
 800052c:	4b69      	ldr	r3, [pc, #420]	; (80006d4 <fsm_automatic+0x40c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fd2a 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(red, 1);
 8000538:	4b67      	ldr	r3, [pc, #412]	; (80006d8 <fsm_automatic+0x410>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd24 	bl	8000f8c <displayLED7SEG>

				--red;
 8000544:	4b64      	ldr	r3, [pc, #400]	; (80006d8 <fsm_automatic+0x410>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a63      	ldr	r2, [pc, #396]	; (80006d8 <fsm_automatic+0x410>)
 800054c:	6013      	str	r3, [r2, #0]
				--green;
 800054e:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <fsm_automatic+0x40c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a5f      	ldr	r2, [pc, #380]	; (80006d4 <fsm_automatic+0x40c>)
 8000556:	6013      	str	r3, [r2, #0]
				controlTime_led();
 8000558:	f001 f844 	bl	80015e4 <controlTime_led>

				setTimer(0, 100);
 800055c:	2164      	movs	r1, #100	; 0x64
 800055e:	2000      	movs	r0, #0
 8000560:	f000 ff0a 	bl	8001378 <setTimer>
			}
			if(timer_flag[1]){
 8000564:	4b5a      	ldr	r3, [pc, #360]	; (80006d0 <fsm_automatic+0x408>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00e      	beq.n	800058a <fsm_automatic+0x2c2>
				status = AMBER_RED;
 800056c:	4b5b      	ldr	r3, [pc, #364]	; (80006dc <fsm_automatic+0x414>)
 800056e:	2208      	movs	r2, #8
 8000570:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000572:	f000 ffd3 	bl	800151c <clearAllLed>
				fre_amber = amber*100;
 8000576:	4b5a      	ldr	r3, [pc, #360]	; (80006e0 <fsm_automatic+0x418>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2264      	movs	r2, #100	; 0x64
 800057c:	fb02 f303 	mul.w	r3, r2, r3
 8000580:	603b      	str	r3, [r7, #0]
				setTimer(1, fre_amber);
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fef7 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff fdde 	bl	800014c <isButtonPressed>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d016      	beq.n	80005c4 <fsm_automatic+0x2fc>
				status = MAN_GREEN_RED;
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <fsm_automatic+0x414>)
 8000598:	220b      	movs	r2, #11
 800059a:	601a      	str	r2, [r3, #0]
				red = 10;
 800059c:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <fsm_automatic+0x410>)
 800059e:	220a      	movs	r2, #10
 80005a0:	601a      	str	r2, [r3, #0]
				green = 10;
 80005a2:	4b4c      	ldr	r3, [pc, #304]	; (80006d4 <fsm_automatic+0x40c>)
 80005a4:	220a      	movs	r2, #10
 80005a6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80005a8:	f000 ffb8 	bl	800151c <clearAllLed>
				setTimer(1, 1000);
 80005ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005b0:	2001      	movs	r0, #1
 80005b2:	f000 fee1 	bl	8001378 <setTimer>
				button_flag[1] = 0;
 80005b6:	4b4b      	ldr	r3, [pc, #300]	; (80006e4 <fsm_automatic+0x41c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 80005bc:	2101      	movs	r1, #1
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 feda 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff fdc1 	bl	800014c <isButtonPressed>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d077      	beq.n	80006c0 <fsm_automatic+0x3f8>
				status = MODE_2;
 80005d0:	4b42      	ldr	r3, [pc, #264]	; (80006dc <fsm_automatic+0x414>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80005d6:	f000 ffa1 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 80005da:	2101      	movs	r1, #1
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fecb 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 80005e2:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <fsm_automatic+0x41c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80005e8:	e06a      	b.n	80006c0 <fsm_automatic+0x3f8>
		case AMBER_RED:
			led_amber_red();
 80005ea:	f000 ffeb 	bl	80015c4 <led_amber_red>
			if(timer_flag[0]){
 80005ee:	4b38      	ldr	r3, [pc, #224]	; (80006d0 <fsm_automatic+0x408>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d01b      	beq.n	800062e <fsm_automatic+0x366>
				displayLED7SEG(amber, 0);
 80005f6:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <fsm_automatic+0x418>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fcc5 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(red, 1);
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <fsm_automatic+0x410>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2101      	movs	r1, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fcbf 	bl	8000f8c <displayLED7SEG>

				--red;
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <fsm_automatic+0x410>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <fsm_automatic+0x410>)
 8000616:	6013      	str	r3, [r2, #0]
				--amber;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <fsm_automatic+0x418>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3b01      	subs	r3, #1
 800061e:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <fsm_automatic+0x418>)
 8000620:	6013      	str	r3, [r2, #0]
				controlTime_led();
 8000622:	f000 ffdf 	bl	80015e4 <controlTime_led>

				setTimer(0, 100);
 8000626:	2164      	movs	r1, #100	; 0x64
 8000628:	2000      	movs	r0, #0
 800062a:	f000 fea5 	bl	8001378 <setTimer>
			}
			if(timer_flag[1]){
 800062e:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <fsm_automatic+0x408>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00e      	beq.n	8000654 <fsm_automatic+0x38c>
				status = RED_GREEN;
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <fsm_automatic+0x414>)
 8000638:	2205      	movs	r2, #5
 800063a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800063c:	f000 ff6e 	bl	800151c <clearAllLed>
				fre_green = green*100;
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <fsm_automatic+0x40c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2264      	movs	r2, #100	; 0x64
 8000646:	fb02 f303 	mul.w	r3, r2, r3
 800064a:	607b      	str	r3, [r7, #4]
				setTimer(1, fre_green);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	2001      	movs	r0, #1
 8000650:	f000 fe92 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff fd79 	bl	800014c <isButtonPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d016      	beq.n	800068e <fsm_automatic+0x3c6>
				status = MAN_AMBER_RED;
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <fsm_automatic+0x414>)
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
				red = 10;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <fsm_automatic+0x410>)
 8000668:	220a      	movs	r2, #10
 800066a:	601a      	str	r2, [r3, #0]
				amber = 10;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <fsm_automatic+0x418>)
 800066e:	220a      	movs	r2, #10
 8000670:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8000672:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000676:	2001      	movs	r0, #1
 8000678:	f000 fe7e 	bl	8001378 <setTimer>
				clearAllLed();
 800067c:	f000 ff4e 	bl	800151c <clearAllLed>
				button_flag[1] = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <fsm_automatic+0x41c>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
				setTimer(0, 1);
 8000686:	2101      	movs	r1, #1
 8000688:	2000      	movs	r0, #0
 800068a:	f000 fe75 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 800068e:	2000      	movs	r0, #0
 8000690:	f7ff fd5c 	bl	800014c <isButtonPressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d014      	beq.n	80006c4 <fsm_automatic+0x3fc>
				status = MODE_2;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <fsm_automatic+0x414>)
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80006a0:	f000 ff3c 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 80006a4:	2101      	movs	r1, #1
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 fe66 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <fsm_automatic+0x41c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
			}
			break;
 80006b2:	e007      	b.n	80006c4 <fsm_automatic+0x3fc>
		default: break;
 80006b4:	bf00      	nop
 80006b6:	e006      	b.n	80006c6 <fsm_automatic+0x3fe>
			break;
 80006b8:	bf00      	nop
 80006ba:	e004      	b.n	80006c6 <fsm_automatic+0x3fe>
			break;
 80006bc:	bf00      	nop
 80006be:	e002      	b.n	80006c6 <fsm_automatic+0x3fe>
			break;
 80006c0:	bf00      	nop
 80006c2:	e000      	b.n	80006c6 <fsm_automatic+0x3fe>
			break;
 80006c4:	bf00      	nop
	}
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000009c 	.word	0x2000009c
 80006d4:	2000003c 	.word	0x2000003c
 80006d8:	20000034 	.word	0x20000034
 80006dc:	20000098 	.word	0x20000098
 80006e0:	20000038 	.word	0x20000038
 80006e4:	2000008c 	.word	0x2000008c

080006e8 <fsm_manual>:
 *      Author: 2004p
 */

#include "fsm_manual.h"

void fsm_manual(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	switch(status){
 80006ec:	4ba9      	ldr	r3, [pc, #676]	; (8000994 <fsm_manual+0x2ac>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b09      	subs	r3, #9
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	f200 81cc 	bhi.w	8000a90 <fsm_manual+0x3a8>
 80006f8:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <fsm_manual+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	08000711 	.word	0x08000711
 8000704:	080007e7 	.word	0x080007e7
 8000708:	080008bd 	.word	0x080008bd
 800070c:	080009b9 	.word	0x080009b9
		case MAN_RED_GREEN:
			led_red_green();
 8000710:	f000 ff28 	bl	8001564 <led_red_green>
			if(timer_flag[1]){
 8000714:	4ba0      	ldr	r3, [pc, #640]	; (8000998 <fsm_manual+0x2b0>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d019      	beq.n	8000750 <fsm_manual+0x68>
				status = RED_GREEN;
 800071c:	4b9d      	ldr	r3, [pc, #628]	; (8000994 <fsm_manual+0x2ac>)
 800071e:	2205      	movs	r2, #5
 8000720:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000722:	f000 fefb 	bl	800151c <clearAllLed>
				red = temp_red;
 8000726:	4b9d      	ldr	r3, [pc, #628]	; (800099c <fsm_manual+0x2b4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a9d      	ldr	r2, [pc, #628]	; (80009a0 <fsm_manual+0x2b8>)
 800072c:	6013      	str	r3, [r2, #0]
				green = temp_green;
 800072e:	4b9d      	ldr	r3, [pc, #628]	; (80009a4 <fsm_manual+0x2bc>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a9d      	ldr	r2, [pc, #628]	; (80009a8 <fsm_manual+0x2c0>)
 8000734:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 8000736:	4b9d      	ldr	r3, [pc, #628]	; (80009ac <fsm_manual+0x2c4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a9d      	ldr	r2, [pc, #628]	; (80009b0 <fsm_manual+0x2c8>)
 800073c:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 800073e:	4b9a      	ldr	r3, [pc, #616]	; (80009a8 <fsm_manual+0x2c0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2264      	movs	r2, #100	; 0x64
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	4619      	mov	r1, r3
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fe14 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fcfb 	bl	800014c <isButtonPressed>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d012      	beq.n	8000782 <fsm_manual+0x9a>
				status = MAN_RED_AMBER;
 800075c:	4b8d      	ldr	r3, [pc, #564]	; (8000994 <fsm_manual+0x2ac>)
 800075e:	220a      	movs	r2, #10
 8000760:	601a      	str	r2, [r3, #0]
				red = 10;
 8000762:	4b8f      	ldr	r3, [pc, #572]	; (80009a0 <fsm_manual+0x2b8>)
 8000764:	220a      	movs	r2, #10
 8000766:	601a      	str	r2, [r3, #0]
				amber = 10;
 8000768:	4b91      	ldr	r3, [pc, #580]	; (80009b0 <fsm_manual+0x2c8>)
 800076a:	220a      	movs	r2, #10
 800076c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800076e:	f000 fed5 	bl	800151c <clearAllLed>
				setTimer(1, 1000);
 8000772:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fdfe 	bl	8001378 <setTimer>
				button_flag[1] = 0;
 800077c:	4b8d      	ldr	r3, [pc, #564]	; (80009b4 <fsm_manual+0x2cc>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fce2 	bl	800014c <isButtonPressed>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00b      	beq.n	80007a6 <fsm_manual+0xbe>
				status = MODE_2;
 800078e:	4b81      	ldr	r3, [pc, #516]	; (8000994 <fsm_manual+0x2ac>)
 8000790:	2202      	movs	r2, #2
 8000792:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000794:	f000 fec2 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 8000798:	2101      	movs	r1, #1
 800079a:	2000      	movs	r0, #0
 800079c:	f000 fdec 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <fsm_manual+0x2cc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag[0]){
 80007a6:	4b7c      	ldr	r3, [pc, #496]	; (8000998 <fsm_manual+0x2b0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f000 8172 	beq.w	8000a94 <fsm_manual+0x3ac>
				displayLED7SEG(red, 0);
 80007b0:	4b7b      	ldr	r3, [pc, #492]	; (80009a0 <fsm_manual+0x2b8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fbe8 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(green, 1);
 80007bc:	4b7a      	ldr	r3, [pc, #488]	; (80009a8 <fsm_manual+0x2c0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fbe2 	bl	8000f8c <displayLED7SEG>

				--red;
 80007c8:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <fsm_manual+0x2b8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a74      	ldr	r2, [pc, #464]	; (80009a0 <fsm_manual+0x2b8>)
 80007d0:	6013      	str	r3, [r2, #0]
				--green;
 80007d2:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <fsm_manual+0x2c0>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a73      	ldr	r2, [pc, #460]	; (80009a8 <fsm_manual+0x2c0>)
 80007da:	6013      	str	r3, [r2, #0]

				setTimer(0, 100);
 80007dc:	2164      	movs	r1, #100	; 0x64
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 fdca 	bl	8001378 <setTimer>
			}
			break;
 80007e4:	e156      	b.n	8000a94 <fsm_manual+0x3ac>
		case MAN_RED_AMBER:
			led_red_amber();
 80007e6:	f000 fecd 	bl	8001584 <led_red_amber>
			if(timer_flag[1]){
 80007ea:	4b6b      	ldr	r3, [pc, #428]	; (8000998 <fsm_manual+0x2b0>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d019      	beq.n	8000826 <fsm_manual+0x13e>
				status = RED_GREEN;
 80007f2:	4b68      	ldr	r3, [pc, #416]	; (8000994 <fsm_manual+0x2ac>)
 80007f4:	2205      	movs	r2, #5
 80007f6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80007f8:	f000 fe90 	bl	800151c <clearAllLed>
				red = temp_red;
 80007fc:	4b67      	ldr	r3, [pc, #412]	; (800099c <fsm_manual+0x2b4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a67      	ldr	r2, [pc, #412]	; (80009a0 <fsm_manual+0x2b8>)
 8000802:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8000804:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <fsm_manual+0x2bc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a67      	ldr	r2, [pc, #412]	; (80009a8 <fsm_manual+0x2c0>)
 800080a:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 800080c:	4b67      	ldr	r3, [pc, #412]	; (80009ac <fsm_manual+0x2c4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a67      	ldr	r2, [pc, #412]	; (80009b0 <fsm_manual+0x2c8>)
 8000812:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 8000814:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <fsm_manual+0x2c0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2264      	movs	r2, #100	; 0x64
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	4619      	mov	r1, r3
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fda9 	bl	8001378 <setTimer>
			}
			if(timer_flag[0]){
 8000826:	4b5c      	ldr	r3, [pc, #368]	; (8000998 <fsm_manual+0x2b0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d019      	beq.n	8000862 <fsm_manual+0x17a>
				displayLED7SEG(red, 0);
 800082e:	4b5c      	ldr	r3, [pc, #368]	; (80009a0 <fsm_manual+0x2b8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fba9 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(amber, 1);
 800083a:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <fsm_manual+0x2c8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2101      	movs	r1, #1
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fba3 	bl	8000f8c <displayLED7SEG>

				--red;
 8000846:	4b56      	ldr	r3, [pc, #344]	; (80009a0 <fsm_manual+0x2b8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3b01      	subs	r3, #1
 800084c:	4a54      	ldr	r2, [pc, #336]	; (80009a0 <fsm_manual+0x2b8>)
 800084e:	6013      	str	r3, [r2, #0]
				--amber;
 8000850:	4b57      	ldr	r3, [pc, #348]	; (80009b0 <fsm_manual+0x2c8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3b01      	subs	r3, #1
 8000856:	4a56      	ldr	r2, [pc, #344]	; (80009b0 <fsm_manual+0x2c8>)
 8000858:	6013      	str	r3, [r2, #0]

				setTimer(0, 100);
 800085a:	2164      	movs	r1, #100	; 0x64
 800085c:	2000      	movs	r0, #0
 800085e:	f000 fd8b 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 8000862:	2001      	movs	r0, #1
 8000864:	f7ff fc72 	bl	800014c <isButtonPressed>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d012      	beq.n	8000894 <fsm_manual+0x1ac>
				status = MAN_GREEN_RED;
 800086e:	4b49      	ldr	r3, [pc, #292]	; (8000994 <fsm_manual+0x2ac>)
 8000870:	220b      	movs	r2, #11
 8000872:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8000874:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fd7d 	bl	8001378 <setTimer>
				clearAllLed();
 800087e:	f000 fe4d 	bl	800151c <clearAllLed>
				red = 10;
 8000882:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <fsm_manual+0x2b8>)
 8000884:	220a      	movs	r2, #10
 8000886:	601a      	str	r2, [r3, #0]
				green = 10;
 8000888:	4b47      	ldr	r3, [pc, #284]	; (80009a8 <fsm_manual+0x2c0>)
 800088a:	220a      	movs	r2, #10
 800088c:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 800088e:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <fsm_manual+0x2cc>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fc59 	bl	800014c <isButtonPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	f000 80fb 	beq.w	8000a98 <fsm_manual+0x3b0>
				status = MODE_2;
 80008a2:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <fsm_manual+0x2ac>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80008a8:	f000 fe38 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 fd62 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 80008b4:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <fsm_manual+0x2cc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
			}
			break;
 80008ba:	e0ed      	b.n	8000a98 <fsm_manual+0x3b0>
		case MAN_GREEN_RED:
			led_green_red();
 80008bc:	f000 fe72 	bl	80015a4 <led_green_red>
			if(timer_flag[0]){
 80008c0:	4b35      	ldr	r3, [pc, #212]	; (8000998 <fsm_manual+0x2b0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d019      	beq.n	80008fc <fsm_manual+0x214>
				displayLED7SEG(green, 0);
 80008c8:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <fsm_manual+0x2c0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fb5c 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(red, 1);
 80008d4:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <fsm_manual+0x2b8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 fb56 	bl	8000f8c <displayLED7SEG>

				--red;
 80008e0:	4b2f      	ldr	r3, [pc, #188]	; (80009a0 <fsm_manual+0x2b8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	4a2e      	ldr	r2, [pc, #184]	; (80009a0 <fsm_manual+0x2b8>)
 80008e8:	6013      	str	r3, [r2, #0]
				--green;
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <fsm_manual+0x2c0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4a2d      	ldr	r2, [pc, #180]	; (80009a8 <fsm_manual+0x2c0>)
 80008f2:	6013      	str	r3, [r2, #0]

				setTimer(0, 100);
 80008f4:	2164      	movs	r1, #100	; 0x64
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fd3e 	bl	8001378 <setTimer>
			}
			if(timer_flag[1]){
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <fsm_manual+0x2b0>)
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d019      	beq.n	8000938 <fsm_manual+0x250>
				status = RED_GREEN;
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <fsm_manual+0x2ac>)
 8000906:	2205      	movs	r2, #5
 8000908:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800090a:	f000 fe07 	bl	800151c <clearAllLed>
				red = temp_red;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <fsm_manual+0x2b4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a23      	ldr	r2, [pc, #140]	; (80009a0 <fsm_manual+0x2b8>)
 8000914:	6013      	str	r3, [r2, #0]
				green = temp_green;
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <fsm_manual+0x2bc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <fsm_manual+0x2c0>)
 800091c:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <fsm_manual+0x2c4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <fsm_manual+0x2c8>)
 8000924:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 8000926:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <fsm_manual+0x2c0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2264      	movs	r2, #100	; 0x64
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	4619      	mov	r1, r3
 8000932:	2001      	movs	r0, #1
 8000934:	f000 fd20 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fc07 	bl	800014c <isButtonPressed>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d012      	beq.n	800096a <fsm_manual+0x282>
				status = MAN_AMBER_RED;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <fsm_manual+0x2ac>)
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
				red = 10;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <fsm_manual+0x2b8>)
 800094c:	220a      	movs	r2, #10
 800094e:	601a      	str	r2, [r3, #0]
				amber = 10;
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <fsm_manual+0x2c8>)
 8000952:	220a      	movs	r2, #10
 8000954:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8000956:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800095a:	2001      	movs	r0, #1
 800095c:	f000 fd0c 	bl	8001378 <setTimer>
				clearAllLed();
 8000960:	f000 fddc 	bl	800151c <clearAllLed>
				button_flag[1] = 0;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <fsm_manual+0x2cc>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fbee 	bl	800014c <isButtonPressed>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	f000 8092 	beq.w	8000a9c <fsm_manual+0x3b4>
				status = MODE_2;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <fsm_manual+0x2ac>)
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
				clearAllLed();
 800097e:	f000 fdcd 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 8000982:	2101      	movs	r1, #1
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fcf7 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <fsm_manual+0x2cc>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000990:	e084      	b.n	8000a9c <fsm_manual+0x3b4>
 8000992:	bf00      	nop
 8000994:	20000098 	.word	0x20000098
 8000998:	2000009c 	.word	0x2000009c
 800099c:	20000040 	.word	0x20000040
 80009a0:	20000034 	.word	0x20000034
 80009a4:	20000048 	.word	0x20000048
 80009a8:	2000003c 	.word	0x2000003c
 80009ac:	20000044 	.word	0x20000044
 80009b0:	20000038 	.word	0x20000038
 80009b4:	2000008c 	.word	0x2000008c
		case MAN_AMBER_RED:
			led_amber_red();
 80009b8:	f000 fe04 	bl	80015c4 <led_amber_red>
			if(timer_flag[1]){
 80009bc:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <fsm_manual+0x3c0>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d019      	beq.n	80009f8 <fsm_manual+0x310>
				status = RED_GREEN;
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <fsm_manual+0x3c4>)
 80009c6:	2205      	movs	r2, #5
 80009c8:	601a      	str	r2, [r3, #0]
				clearAllLed();
 80009ca:	f000 fda7 	bl	800151c <clearAllLed>
				red = temp_red;
 80009ce:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <fsm_manual+0x3c8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a38      	ldr	r2, [pc, #224]	; (8000ab4 <fsm_manual+0x3cc>)
 80009d4:	6013      	str	r3, [r2, #0]
				green = temp_green;
 80009d6:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <fsm_manual+0x3d0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a38      	ldr	r2, [pc, #224]	; (8000abc <fsm_manual+0x3d4>)
 80009dc:	6013      	str	r3, [r2, #0]
				amber = temp_amber;
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <fsm_manual+0x3d8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <fsm_manual+0x3dc>)
 80009e4:	6013      	str	r3, [r2, #0]
				setTimer(1, green*100);
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <fsm_manual+0x3d4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2264      	movs	r2, #100	; 0x64
 80009ec:	fb02 f303 	mul.w	r3, r2, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fcc0 	bl	8001378 <setTimer>
			}
			if(timer_flag[0]){
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <fsm_manual+0x3c0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d01b      	beq.n	8000a38 <fsm_manual+0x350>
				displayLED7SEG(amber, 0);
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <fsm_manual+0x3dc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fac0 	bl	8000f8c <displayLED7SEG>
				displayLED7SEG(red, 1);
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <fsm_manual+0x3cc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 faba 	bl	8000f8c <displayLED7SEG>

				--red;
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <fsm_manual+0x3cc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <fsm_manual+0x3cc>)
 8000a20:	6013      	str	r3, [r2, #0]
				--amber;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <fsm_manual+0x3dc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <fsm_manual+0x3dc>)
 8000a2a:	6013      	str	r3, [r2, #0]
				controlTime_led();
 8000a2c:	f000 fdda 	bl	80015e4 <controlTime_led>

				setTimer(0, 100);
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 fca0 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(1)){
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fb87 	bl	800014c <isButtonPressed>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d012      	beq.n	8000a6a <fsm_manual+0x382>
				status = MAN_RED_GREEN;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <fsm_manual+0x3c4>)
 8000a46:	2209      	movs	r2, #9
 8000a48:	601a      	str	r2, [r3, #0]
				setTimer(1, 1000);
 8000a4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fc92 	bl	8001378 <setTimer>
				clearAllLed();
 8000a54:	f000 fd62 	bl	800151c <clearAllLed>
				red = 10;
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <fsm_manual+0x3cc>)
 8000a5a:	220a      	movs	r2, #10
 8000a5c:	601a      	str	r2, [r3, #0]
				green = 10;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <fsm_manual+0x3d4>)
 8000a60:	220a      	movs	r2, #10
 8000a62:	601a      	str	r2, [r3, #0]
				button_flag[1] = 0;
 8000a64:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <fsm_manual+0x3e0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
			}
			if(isButtonPressed(0)){
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fb6e 	bl	800014c <isButtonPressed>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d014      	beq.n	8000aa0 <fsm_manual+0x3b8>
				status = MODE_2;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <fsm_manual+0x3c4>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000a7c:	f000 fd4e 	bl	800151c <clearAllLed>
				setTimer(0, 1);
 8000a80:	2101      	movs	r1, #1
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fc78 	bl	8001378 <setTimer>
				button_flag[0] = 0;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <fsm_manual+0x3e0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a8e:	e007      	b.n	8000aa0 <fsm_manual+0x3b8>
		default: break;
 8000a90:	bf00      	nop
 8000a92:	e006      	b.n	8000aa2 <fsm_manual+0x3ba>
			break;
 8000a94:	bf00      	nop
 8000a96:	e004      	b.n	8000aa2 <fsm_manual+0x3ba>
			break;
 8000a98:	bf00      	nop
 8000a9a:	e002      	b.n	8000aa2 <fsm_manual+0x3ba>
			break;
 8000a9c:	bf00      	nop
 8000a9e:	e000      	b.n	8000aa2 <fsm_manual+0x3ba>
			break;
 8000aa0:	bf00      	nop
	}
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000009c 	.word	0x2000009c
 8000aac:	20000098 	.word	0x20000098
 8000ab0:	20000040 	.word	0x20000040
 8000ab4:	20000034 	.word	0x20000034
 8000ab8:	20000048 	.word	0x20000048
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	20000044 	.word	0x20000044
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	2000008c 	.word	0x2000008c

08000acc <fsm_setting>:
 */


#include "fsm_setting.h"

void fsm_setting(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	switch(status){
 8000ad0:	4b94      	ldr	r3, [pc, #592]	; (8000d24 <fsm_setting+0x258>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	f200 8233 	bhi.w	8000f42 <fsm_setting+0x476>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <fsm_setting+0x18>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000afd 	.word	0x08000afd
 8000aec:	08000c73 	.word	0x08000c73
 8000af0:	08000df9 	.word	0x08000df9
		case MODE_1:
			status = INIT;
 8000af4:	4b8b      	ldr	r3, [pc, #556]	; (8000d24 <fsm_setting+0x258>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			break;
 8000afa:	e229      	b.n	8000f50 <fsm_setting+0x484>
		case MODE_2:
			displayLED7SEG(status, 1);
 8000afc:	4b89      	ldr	r3, [pc, #548]	; (8000d24 <fsm_setting+0x258>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fa42 	bl	8000f8c <displayLED7SEG>
			displayLED7SEG(adj_red, 0);
 8000b08:	4b87      	ldr	r3, [pc, #540]	; (8000d28 <fsm_setting+0x25c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fa3c 	bl	8000f8c <displayLED7SEG>
			if(timer_flag[0]){
 8000b14:	4b85      	ldr	r3, [pc, #532]	; (8000d2c <fsm_setting+0x260>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d008      	beq.n	8000b2e <fsm_setting+0x62>
				blinkingLed(status);
 8000b1c:	4b81      	ldr	r3, [pc, #516]	; (8000d24 <fsm_setting+0x258>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fd89 	bl	8001638 <blinkingLed>
				setTimer(0, 50);
 8000b26:	2132      	movs	r1, #50	; 0x32
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fc25 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fb0c 	bl	800014c <isButtonPressed>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d007      	beq.n	8000b4a <fsm_setting+0x7e>
				status = MODE_3;
 8000b3a:	4b7a      	ldr	r3, [pc, #488]	; (8000d24 <fsm_setting+0x258>)
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000b40:	f000 fcec 	bl	800151c <clearAllLed>
				button_flag[0] = 0;
 8000b44:	4b7a      	ldr	r3, [pc, #488]	; (8000d30 <fsm_setting+0x264>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fafe 	bl	800014c <isButtonPressed>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d014      	beq.n	8000b80 <fsm_setting+0xb4>
				button_flag[1] = 0;
 8000b56:	4b76      	ldr	r3, [pc, #472]	; (8000d30 <fsm_setting+0x264>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
				adj_red++;
 8000b5c:	4b72      	ldr	r3, [pc, #456]	; (8000d28 <fsm_setting+0x25c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a71      	ldr	r2, [pc, #452]	; (8000d28 <fsm_setting+0x25c>)
 8000b64:	6013      	str	r3, [r2, #0]
				if(adj_red == 100)
 8000b66:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <fsm_setting+0x25c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b64      	cmp	r3, #100	; 0x64
 8000b6c:	d102      	bne.n	8000b74 <fsm_setting+0xa8>
					adj_red = 1;
 8000b6e:	4b6e      	ldr	r3, [pc, #440]	; (8000d28 <fsm_setting+0x25c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
				displayLED7SEG(adj_red, 0);
 8000b74:	4b6c      	ldr	r3, [pc, #432]	; (8000d28 <fsm_setting+0x25c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fa06 	bl	8000f8c <displayLED7SEG>
			}
			if(isButtonPressed(2)){
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fae3 	bl	800014c <isButtonPressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f000 81dc 	beq.w	8000f46 <fsm_setting+0x47a>
				button_flag[2] = 0;
 8000b8e:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <fsm_setting+0x264>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
				if(adj_red > 2 && adj_red < 98){
 8000b94:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <fsm_setting+0x25c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	dd4b      	ble.n	8000c34 <fsm_setting+0x168>
 8000b9c:	4b62      	ldr	r3, [pc, #392]	; (8000d28 <fsm_setting+0x25c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b61      	cmp	r3, #97	; 0x61
 8000ba2:	dc47      	bgt.n	8000c34 <fsm_setting+0x168>
					amber = ((temp_green < adj_red) ? (adj_red - temp_green) : temp_amber);
 8000ba4:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <fsm_setting+0x268>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <fsm_setting+0x25c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	da05      	bge.n	8000bbc <fsm_setting+0xf0>
 8000bb0:	4b5d      	ldr	r3, [pc, #372]	; (8000d28 <fsm_setting+0x25c>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b5f      	ldr	r3, [pc, #380]	; (8000d34 <fsm_setting+0x268>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	e001      	b.n	8000bc0 <fsm_setting+0xf4>
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <fsm_setting+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a5e      	ldr	r2, [pc, #376]	; (8000d3c <fsm_setting+0x270>)
 8000bc2:	6013      	str	r3, [r2, #0]

					if(green + amber < 100){
 8000bc4:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <fsm_setting+0x274>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b5c      	ldr	r3, [pc, #368]	; (8000d3c <fsm_setting+0x270>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	2b63      	cmp	r3, #99	; 0x63
 8000bd0:	dc17      	bgt.n	8000c02 <fsm_setting+0x136>
						green = adj_red - amber;
 8000bd2:	4b55      	ldr	r3, [pc, #340]	; (8000d28 <fsm_setting+0x25c>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b59      	ldr	r3, [pc, #356]	; (8000d3c <fsm_setting+0x270>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	4a58      	ldr	r2, [pc, #352]	; (8000d40 <fsm_setting+0x274>)
 8000bde:	6013      	str	r3, [r2, #0]
						red = adj_red;
 8000be0:	4b51      	ldr	r3, [pc, #324]	; (8000d28 <fsm_setting+0x25c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a57      	ldr	r2, [pc, #348]	; (8000d44 <fsm_setting+0x278>)
 8000be6:	6013      	str	r3, [r2, #0]

						temp_red = red;
 8000be8:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <fsm_setting+0x278>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a56      	ldr	r2, [pc, #344]	; (8000d48 <fsm_setting+0x27c>)
 8000bee:	6013      	str	r3, [r2, #0]
						temp_amber = amber;
 8000bf0:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <fsm_setting+0x270>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a50      	ldr	r2, [pc, #320]	; (8000d38 <fsm_setting+0x26c>)
 8000bf6:	6013      	str	r3, [r2, #0]
						temp_green = green;
 8000bf8:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <fsm_setting+0x274>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a4d      	ldr	r2, [pc, #308]	; (8000d34 <fsm_setting+0x268>)
 8000bfe:	6013      	str	r3, [r2, #0]
					if(green + amber < 100){
 8000c00:	e024      	b.n	8000c4c <fsm_setting+0x180>
					}
					else{
						red = max_red;
 8000c02:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <fsm_setting+0x280>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <fsm_setting+0x278>)
 8000c08:	6013      	str	r3, [r2, #0]
						amber = max_amber;
 8000c0a:	4b51      	ldr	r3, [pc, #324]	; (8000d50 <fsm_setting+0x284>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a4b      	ldr	r2, [pc, #300]	; (8000d3c <fsm_setting+0x270>)
 8000c10:	6013      	str	r3, [r2, #0]
						green = max_green;
 8000c12:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <fsm_setting+0x288>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a4a      	ldr	r2, [pc, #296]	; (8000d40 <fsm_setting+0x274>)
 8000c18:	6013      	str	r3, [r2, #0]
						temp_red = red;
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <fsm_setting+0x278>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a4a      	ldr	r2, [pc, #296]	; (8000d48 <fsm_setting+0x27c>)
 8000c20:	6013      	str	r3, [r2, #0]
						temp_amber = amber;
 8000c22:	4b46      	ldr	r3, [pc, #280]	; (8000d3c <fsm_setting+0x270>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a44      	ldr	r2, [pc, #272]	; (8000d38 <fsm_setting+0x26c>)
 8000c28:	6013      	str	r3, [r2, #0]
						temp_green = green;
 8000c2a:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <fsm_setting+0x274>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a41      	ldr	r2, [pc, #260]	; (8000d34 <fsm_setting+0x268>)
 8000c30:	6013      	str	r3, [r2, #0]
					if(green + amber < 100){
 8000c32:	e00b      	b.n	8000c4c <fsm_setting+0x180>
					}
				}
				else{
					red = max_red;
 8000c34:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <fsm_setting+0x280>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <fsm_setting+0x278>)
 8000c3a:	6013      	str	r3, [r2, #0]
					amber = max_amber;
 8000c3c:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <fsm_setting+0x284>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a3e      	ldr	r2, [pc, #248]	; (8000d3c <fsm_setting+0x270>)
 8000c42:	6013      	str	r3, [r2, #0]
					green = max_green;
 8000c44:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <fsm_setting+0x288>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <fsm_setting+0x274>)
 8000c4a:	6013      	str	r3, [r2, #0]
				}
				clearAllLed();
 8000c4c:	f000 fc66 	bl	800151c <clearAllLed>
				status = RED_GREEN;
 8000c50:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <fsm_setting+0x258>)
 8000c52:	2205      	movs	r2, #5
 8000c54:	601a      	str	r2, [r3, #0]
				setTimer(1, green*100);
 8000c56:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <fsm_setting+0x274>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2264      	movs	r2, #100	; 0x64
 8000c5c:	fb02 f303 	mul.w	r3, r2, r3
 8000c60:	4619      	mov	r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	f000 fb88 	bl	8001378 <setTimer>
				setTimer(0, 1);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 fb84 	bl	8001378 <setTimer>
			}
			break;
 8000c70:	e169      	b.n	8000f46 <fsm_setting+0x47a>
		case MODE_3:
			displayLED7SEG(status, 1);
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <fsm_setting+0x258>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f987 	bl	8000f8c <displayLED7SEG>
			displayLED7SEG(adj_amber, 0);
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <fsm_setting+0x28c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f981 	bl	8000f8c <displayLED7SEG>
			if(timer_flag[0]){
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <fsm_setting+0x260>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <fsm_setting+0x1d8>
				blinkingLed(status);
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <fsm_setting+0x258>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fcce 	bl	8001638 <blinkingLed>
				setTimer(0, 50);
 8000c9c:	2132      	movs	r1, #50	; 0x32
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fb6a 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff fa51 	bl	800014c <isButtonPressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d007      	beq.n	8000cc0 <fsm_setting+0x1f4>
				status = MODE_4;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <fsm_setting+0x258>)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000cb6:	f000 fc31 	bl	800151c <clearAllLed>
				button_flag[0] = 0;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <fsm_setting+0x264>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff fa43 	bl	800014c <isButtonPressed>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d014      	beq.n	8000cf6 <fsm_setting+0x22a>
				button_flag[1] = 0;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <fsm_setting+0x264>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
				adj_amber++;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <fsm_setting+0x28c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <fsm_setting+0x28c>)
 8000cda:	6013      	str	r3, [r2, #0]
				if(adj_amber == 100)
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <fsm_setting+0x28c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b64      	cmp	r3, #100	; 0x64
 8000ce2:	d102      	bne.n	8000cea <fsm_setting+0x21e>
					adj_amber = 1;
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <fsm_setting+0x28c>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
				displayLED7SEG(adj_amber, 0);
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <fsm_setting+0x28c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f94b 	bl	8000f8c <displayLED7SEG>
			}
			if(isButtonPressed(2)){
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f7ff fa28 	bl	800014c <isButtonPressed>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 8123 	beq.w	8000f4a <fsm_setting+0x47e>
				button_flag[2] = 0;
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <fsm_setting+0x264>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
				green = ((adj_amber < temp_red) ? (temp_red - adj_amber) : temp_green);
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <fsm_setting+0x28c>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <fsm_setting+0x27c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	da22      	bge.n	8000d5c <fsm_setting+0x290>
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <fsm_setting+0x27c>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <fsm_setting+0x28c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	e01e      	b.n	8000d60 <fsm_setting+0x294>
 8000d22:	bf00      	nop
 8000d24:	20000098 	.word	0x20000098
 8000d28:	20000058 	.word	0x20000058
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	2000008c 	.word	0x2000008c
 8000d34:	20000048 	.word	0x20000048
 8000d38:	20000044 	.word	0x20000044
 8000d3c:	20000038 	.word	0x20000038
 8000d40:	2000003c 	.word	0x2000003c
 8000d44:	20000034 	.word	0x20000034
 8000d48:	20000040 	.word	0x20000040
 8000d4c:	2000004c 	.word	0x2000004c
 8000d50:	20000050 	.word	0x20000050
 8000d54:	20000054 	.word	0x20000054
 8000d58:	2000005c 	.word	0x2000005c
 8000d5c:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <fsm_setting+0x488>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a7d      	ldr	r2, [pc, #500]	; (8000f58 <fsm_setting+0x48c>)
 8000d62:	6013      	str	r3, [r2, #0]


				if((green + adj_amber) < 100){
 8000d64:	4b7c      	ldr	r3, [pc, #496]	; (8000f58 <fsm_setting+0x48c>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b7c      	ldr	r3, [pc, #496]	; (8000f5c <fsm_setting+0x490>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	2b63      	cmp	r3, #99	; 0x63
 8000d70:	dc17      	bgt.n	8000da2 <fsm_setting+0x2d6>
					red = green + adj_amber;
 8000d72:	4b79      	ldr	r3, [pc, #484]	; (8000f58 <fsm_setting+0x48c>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	4b79      	ldr	r3, [pc, #484]	; (8000f5c <fsm_setting+0x490>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a78      	ldr	r2, [pc, #480]	; (8000f60 <fsm_setting+0x494>)
 8000d7e:	6013      	str	r3, [r2, #0]
					amber = adj_amber;
 8000d80:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <fsm_setting+0x490>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <fsm_setting+0x498>)
 8000d86:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8000d88:	4b75      	ldr	r3, [pc, #468]	; (8000f60 <fsm_setting+0x494>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a76      	ldr	r2, [pc, #472]	; (8000f68 <fsm_setting+0x49c>)
 8000d8e:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 8000d90:	4b74      	ldr	r3, [pc, #464]	; (8000f64 <fsm_setting+0x498>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a75      	ldr	r2, [pc, #468]	; (8000f6c <fsm_setting+0x4a0>)
 8000d96:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8000d98:	4b6f      	ldr	r3, [pc, #444]	; (8000f58 <fsm_setting+0x48c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a6d      	ldr	r2, [pc, #436]	; (8000f54 <fsm_setting+0x488>)
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	e017      	b.n	8000dd2 <fsm_setting+0x306>
				}
				else{
					red = max_red;
 8000da2:	4b73      	ldr	r3, [pc, #460]	; (8000f70 <fsm_setting+0x4a4>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a6e      	ldr	r2, [pc, #440]	; (8000f60 <fsm_setting+0x494>)
 8000da8:	6013      	str	r3, [r2, #0]
					amber = max_amber;
 8000daa:	4b72      	ldr	r3, [pc, #456]	; (8000f74 <fsm_setting+0x4a8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a6d      	ldr	r2, [pc, #436]	; (8000f64 <fsm_setting+0x498>)
 8000db0:	6013      	str	r3, [r2, #0]
					green = max_green;
 8000db2:	4b71      	ldr	r3, [pc, #452]	; (8000f78 <fsm_setting+0x4ac>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a68      	ldr	r2, [pc, #416]	; (8000f58 <fsm_setting+0x48c>)
 8000db8:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8000dba:	4b69      	ldr	r3, [pc, #420]	; (8000f60 <fsm_setting+0x494>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a6a      	ldr	r2, [pc, #424]	; (8000f68 <fsm_setting+0x49c>)
 8000dc0:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 8000dc2:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <fsm_setting+0x498>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a69      	ldr	r2, [pc, #420]	; (8000f6c <fsm_setting+0x4a0>)
 8000dc8:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8000dca:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <fsm_setting+0x48c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a61      	ldr	r2, [pc, #388]	; (8000f54 <fsm_setting+0x488>)
 8000dd0:	6013      	str	r3, [r2, #0]
				}
				clearAllLed();
 8000dd2:	f000 fba3 	bl	800151c <clearAllLed>
				status = RED_GREEN;
 8000dd6:	4b69      	ldr	r3, [pc, #420]	; (8000f7c <fsm_setting+0x4b0>)
 8000dd8:	2205      	movs	r2, #5
 8000dda:	601a      	str	r2, [r3, #0]
				setTimer(1, green*100);
 8000ddc:	4b5e      	ldr	r3, [pc, #376]	; (8000f58 <fsm_setting+0x48c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2264      	movs	r2, #100	; 0x64
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 fac5 	bl	8001378 <setTimer>
				setTimer(0, 1);
 8000dee:	2101      	movs	r1, #1
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fac1 	bl	8001378 <setTimer>
			}
			break;
 8000df6:	e0a8      	b.n	8000f4a <fsm_setting+0x47e>
		case MODE_4:
			displayLED7SEG(status, 1);
 8000df8:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <fsm_setting+0x4b0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f8c4 	bl	8000f8c <displayLED7SEG>
			displayLED7SEG(adj_green, 0);
 8000e04:	4b5e      	ldr	r3, [pc, #376]	; (8000f80 <fsm_setting+0x4b4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f8be 	bl	8000f8c <displayLED7SEG>
			if(timer_flag[0]){
 8000e10:	4b5c      	ldr	r3, [pc, #368]	; (8000f84 <fsm_setting+0x4b8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <fsm_setting+0x35e>
				blinkingLed(status);
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <fsm_setting+0x4b0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fc0b 	bl	8001638 <blinkingLed>
				setTimer(0, 50);
 8000e22:	2132      	movs	r1, #50	; 0x32
 8000e24:	2000      	movs	r0, #0
 8000e26:	f000 faa7 	bl	8001378 <setTimer>
			}
			if(isButtonPressed(0)){
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff f98e 	bl	800014c <isButtonPressed>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <fsm_setting+0x37a>
				status = MODE_1;
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <fsm_setting+0x4b0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
				clearAllLed();
 8000e3c:	f000 fb6e 	bl	800151c <clearAllLed>
				button_flag[0] = 0;
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <fsm_setting+0x4bc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(1)){
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff f980 	bl	800014c <isButtonPressed>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d014      	beq.n	8000e7c <fsm_setting+0x3b0>
				button_flag[1] = 0;
 8000e52:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <fsm_setting+0x4bc>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
				adj_green++;
 8000e58:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <fsm_setting+0x4b4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a48      	ldr	r2, [pc, #288]	; (8000f80 <fsm_setting+0x4b4>)
 8000e60:	6013      	str	r3, [r2, #0]
				if(adj_green == 100)
 8000e62:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <fsm_setting+0x4b4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d102      	bne.n	8000e70 <fsm_setting+0x3a4>
					adj_green = 1;
 8000e6a:	4b45      	ldr	r3, [pc, #276]	; (8000f80 <fsm_setting+0x4b4>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
				displayLED7SEG(adj_green, 0);
 8000e70:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <fsm_setting+0x4b4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f888 	bl	8000f8c <displayLED7SEG>
			}
			if(isButtonPressed(2)){
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f7ff f965 	bl	800014c <isButtonPressed>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d062      	beq.n	8000f4e <fsm_setting+0x482>
				button_flag[2] = 0;
 8000e88:	4b3f      	ldr	r3, [pc, #252]	; (8000f88 <fsm_setting+0x4bc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
				amber = ((adj_green < temp_red) ? (temp_red - adj_green) : temp_amber);
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <fsm_setting+0x4b4>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <fsm_setting+0x49c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	da05      	bge.n	8000ea6 <fsm_setting+0x3da>
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <fsm_setting+0x49c>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4b38      	ldr	r3, [pc, #224]	; (8000f80 <fsm_setting+0x4b4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	e001      	b.n	8000eaa <fsm_setting+0x3de>
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <fsm_setting+0x4a0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a2e      	ldr	r2, [pc, #184]	; (8000f64 <fsm_setting+0x498>)
 8000eac:	6013      	str	r3, [r2, #0]

				if(adj_green + amber < 100){
 8000eae:	4b34      	ldr	r3, [pc, #208]	; (8000f80 <fsm_setting+0x4b4>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	; (8000f64 <fsm_setting+0x498>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	2b63      	cmp	r3, #99	; 0x63
 8000eba:	dc17      	bgt.n	8000eec <fsm_setting+0x420>
					red = adj_green + amber;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <fsm_setting+0x4b4>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <fsm_setting+0x498>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <fsm_setting+0x494>)
 8000ec8:	6013      	str	r3, [r2, #0]
					green = adj_green;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <fsm_setting+0x4b4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a22      	ldr	r2, [pc, #136]	; (8000f58 <fsm_setting+0x48c>)
 8000ed0:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <fsm_setting+0x494>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a24      	ldr	r2, [pc, #144]	; (8000f68 <fsm_setting+0x49c>)
 8000ed8:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <fsm_setting+0x498>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <fsm_setting+0x4a0>)
 8000ee0:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <fsm_setting+0x48c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <fsm_setting+0x488>)
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e017      	b.n	8000f1c <fsm_setting+0x450>
				}
				else{
					red = max_red;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <fsm_setting+0x4a4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <fsm_setting+0x494>)
 8000ef2:	6013      	str	r3, [r2, #0]
					amber = max_amber;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <fsm_setting+0x4a8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <fsm_setting+0x498>)
 8000efa:	6013      	str	r3, [r2, #0]
					green = max_green;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <fsm_setting+0x4ac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <fsm_setting+0x48c>)
 8000f02:	6013      	str	r3, [r2, #0]
					temp_red = red;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <fsm_setting+0x494>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <fsm_setting+0x49c>)
 8000f0a:	6013      	str	r3, [r2, #0]
					temp_amber = amber;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <fsm_setting+0x498>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <fsm_setting+0x4a0>)
 8000f12:	6013      	str	r3, [r2, #0]
					temp_green = green;
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <fsm_setting+0x48c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <fsm_setting+0x488>)
 8000f1a:	6013      	str	r3, [r2, #0]
				}
				clearAllLed();
 8000f1c:	f000 fafe 	bl	800151c <clearAllLed>
				status = RED_GREEN;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <fsm_setting+0x4b0>)
 8000f22:	2205      	movs	r2, #5
 8000f24:	601a      	str	r2, [r3, #0]
				setTimer(1, green*100);
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <fsm_setting+0x48c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2264      	movs	r2, #100	; 0x64
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 fa20 	bl	8001378 <setTimer>
				setTimer(0, 1);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 fa1c 	bl	8001378 <setTimer>
			}
			break;
 8000f40:	e005      	b.n	8000f4e <fsm_setting+0x482>
		default:
			break;
 8000f42:	bf00      	nop
 8000f44:	e004      	b.n	8000f50 <fsm_setting+0x484>
			break;
 8000f46:	bf00      	nop
 8000f48:	e002      	b.n	8000f50 <fsm_setting+0x484>
			break;
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <fsm_setting+0x484>
			break;
 8000f4e:	bf00      	nop
	}
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000048 	.word	0x20000048
 8000f58:	2000003c 	.word	0x2000003c
 8000f5c:	2000005c 	.word	0x2000005c
 8000f60:	20000034 	.word	0x20000034
 8000f64:	20000038 	.word	0x20000038
 8000f68:	20000040 	.word	0x20000040
 8000f6c:	20000044 	.word	0x20000044
 8000f70:	2000004c 	.word	0x2000004c
 8000f74:	20000050 	.word	0x20000050
 8000f78:	20000054 	.word	0x20000054
 8000f7c:	20000098 	.word	0x20000098
 8000f80:	20000060 	.word	0x20000060
 8000f84:	2000009c 	.word	0x2000009c
 8000f88:	2000008c 	.word	0x2000008c

08000f8c <displayLED7SEG>:
#include "led7_segment.h"

#define MODE 0
#define DUR 1

void displayLED7SEG(int number, int modify){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08e      	sub	sp, #56	; 0x38
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	int div = number / 10;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a6a      	ldr	r2, [pc, #424]	; (8001144 <displayLED7SEG+0x1b8>)
 8000f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9e:	1092      	asrs	r2, r2, #2
 8000fa0:	17db      	asrs	r3, r3, #31
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
	int mod = number % 10;
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4b66      	ldr	r3, [pc, #408]	; (8001144 <displayLED7SEG+0x1b8>)
 8000faa:	fb83 1302 	smull	r1, r3, r3, r2
 8000fae:	1099      	asrs	r1, r3, #2
 8000fb0:	17d3      	asrs	r3, r2, #31
 8000fb2:	1ac9      	subs	r1, r1, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	633b      	str	r3, [r7, #48]	; 0x30

	int arr1[4] = {0};
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
	int arr2[4] = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

	for(int i = 3; i >= 0; --i){
 8000fdc:	2303      	movs	r3, #3
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe0:	e028      	b.n	8001034 <displayLED7SEG+0xa8>
		arr1[i] = div % 2;
 8000fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	bfb8      	it	lt
 8000fec:	425b      	neglt	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f843 2c1c 	str.w	r2, [r3, #-28]
		div = div / 2;
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	0fda      	lsrs	r2, r3, #31
 8001002:	4413      	add	r3, r2
 8001004:	105b      	asrs	r3, r3, #1
 8001006:	637b      	str	r3, [r7, #52]	; 0x34

		arr2[i] = mod % 2;
 8001008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100a:	2b00      	cmp	r3, #0
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	bfb8      	it	lt
 8001012:	425b      	neglt	r3, r3
 8001014:	461a      	mov	r2, r3
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800101e:	440b      	add	r3, r1
 8001020:	f843 2c2c 	str.w	r2, [r3, #-44]
		mod = mod / 2;
 8001024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001026:	0fda      	lsrs	r2, r3, #31
 8001028:	4413      	add	r3, r2
 800102a:	105b      	asrs	r3, r3, #1
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
	for(int i = 3; i >= 0; --i){
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	3b01      	subs	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001036:	2b00      	cmp	r3, #0
 8001038:	dad3      	bge.n	8000fe2 <displayLED7SEG+0x56>
	}

	if(modify == MODE){
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d13b      	bne.n	80010b8 <displayLED7SEG+0x12c>
		HAL_GPIO_WritePin(SETMODE_0_GPIO_Port, SETMODE_0_Pin, arr1[3]);
 8001040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	2102      	movs	r1, #2
 8001048:	483f      	ldr	r0, [pc, #252]	; (8001148 <displayLED7SEG+0x1bc>)
 800104a:	f000 fe50 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SETMODE_1_GPIO_Port, SETMODE_1_Pin, arr1[2]);
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	b2db      	uxtb	r3, r3
 8001052:	461a      	mov	r2, r3
 8001054:	2104      	movs	r1, #4
 8001056:	483c      	ldr	r0, [pc, #240]	; (8001148 <displayLED7SEG+0x1bc>)
 8001058:	f000 fe49 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SETMODE_2_GPIO_Port, SETMODE_2_Pin, arr1[1]);
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	461a      	mov	r2, r3
 8001062:	2108      	movs	r1, #8
 8001064:	4838      	ldr	r0, [pc, #224]	; (8001148 <displayLED7SEG+0x1bc>)
 8001066:	f000 fe42 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SETMODE_3_GPIO_Port, SETMODE_3_Pin, arr1[0]);
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	2110      	movs	r1, #16
 8001072:	4835      	ldr	r0, [pc, #212]	; (8001148 <displayLED7SEG+0x1bc>)
 8001074:	f000 fe3b 	bl	8001cee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SETMODE_4_GPIO_Port, SETMODE_4_Pin, arr2[3]);
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <displayLED7SEG+0x1bc>)
 8001084:	f000 fe33 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SETMODE_5_GPIO_Port, SETMODE_5_Pin, arr2[2]);
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001092:	482d      	ldr	r0, [pc, #180]	; (8001148 <displayLED7SEG+0x1bc>)
 8001094:	f000 fe2b 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SETMODE_6_GPIO_Port, SETMODE_6_Pin, arr2[1]);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4829      	ldr	r0, [pc, #164]	; (8001148 <displayLED7SEG+0x1bc>)
 80010a4:	f000 fe23 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SETMODE_7_GPIO_Port, SETMODE_7_Pin, arr2[0]);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b2:	4825      	ldr	r0, [pc, #148]	; (8001148 <displayLED7SEG+0x1bc>)
 80010b4:	f000 fe1b 	bl	8001cee <HAL_GPIO_WritePin>
	}
	if(modify == DUR){
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d13d      	bne.n	800113a <displayLED7SEG+0x1ae>
		HAL_GPIO_WritePin(DUR_0_GPIO_Port, DUR_0_Pin, arr1[3]);
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	4821      	ldr	r0, [pc, #132]	; (800114c <displayLED7SEG+0x1c0>)
 80010c8:	f000 fe11 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DUR_1_GPIO_Port, DUR_1_Pin, arr1[2]);
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	481d      	ldr	r0, [pc, #116]	; (800114c <displayLED7SEG+0x1c0>)
 80010d6:	f000 fe0a 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DUR_2_GPIO_Port, DUR_2_Pin, arr1[1]);
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e4:	4819      	ldr	r0, [pc, #100]	; (800114c <displayLED7SEG+0x1c0>)
 80010e6:	f000 fe02 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DUR_3_GPIO_Port, DUR_3_Pin, arr1[0]);
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
 80010f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f4:	4815      	ldr	r0, [pc, #84]	; (800114c <displayLED7SEG+0x1c0>)
 80010f6:	f000 fdfa 	bl	8001cee <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(DUR_4_GPIO_Port, DUR_4_Pin, arr2[3]);
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <displayLED7SEG+0x1c0>)
 8001106:	f000 fdf2 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DUR_5_GPIO_Port, DUR_5_Pin, arr2[2]);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <displayLED7SEG+0x1c0>)
 8001116:	f000 fdea 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DUR_6_GPIO_Port, DUR_6_Pin, arr2[1]);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <displayLED7SEG+0x1c0>)
 8001126:	f000 fde2 	bl	8001cee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DUR_7_GPIO_Port, DUR_7_Pin, arr2[0]);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <displayLED7SEG+0x1c0>)
 8001136:	f000 fdda 	bl	8001cee <HAL_GPIO_WritePin>
	}
}
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	; 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	66666667 	.word	0x66666667
 8001148:	40010800 	.word	0x40010800
 800114c:	40010c00 	.word	0x40010c00

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 faca 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f810 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 f896 	bl	800128c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001160:	f000 f848 	bl	80011f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <main+0x28>)
 8001166:	f001 fa1f 	bl	80025a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  fsm_manual();
 800116a:	f7ff fabd 	bl	80006e8 <fsm_manual>
	  fsm_automatic();
 800116e:	f7ff f8ab 	bl	80002c8 <fsm_automatic>
	  fsm_setting();
 8001172:	f7ff fcab 	bl	8000acc <fsm_setting>
	  fsm_manual();
 8001176:	e7f8      	b.n	800116a <main+0x1a>
 8001178:	200000ec 	.word	0x200000ec

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f001 fdbc 	bl	8002d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119e:	2302      	movs	r3, #2
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a2:	2301      	movs	r3, #1
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a6:	2310      	movs	r3, #16
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 0318 	add.w	r3, r7, #24
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fdcc 	bl	8001d50 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011be:	f000 f8d5 	bl	800136c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f838 	bl	8002250 <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011e6:	f000 f8c1 	bl	800136c <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3740      	adds	r7, #64	; 0x40
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM2_Init+0x94>)
 8001212:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001216:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_TIM2_Init+0x94>)
 800121a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800121e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM2_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_TIM2_Init+0x94>)
 8001228:	2209      	movs	r2, #9
 800122a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_TIM2_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM2_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM2_Init+0x94>)
 800123a:	f001 f965 	bl	8002508 <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001244:	f000 f892 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM2_Init+0x94>)
 8001256:	f001 fae3 	bl	8002820 <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 f884 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM2_Init+0x94>)
 8001272:	f001 fcbb 	bl	8002bec <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800127c:	f000 f876 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200000ec 	.word	0x200000ec

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a22      	ldr	r2, [pc, #136]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b20      	ldr	r3, [pc, #128]	; (8001348 <MX_GPIO_Init+0xbc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SETMODE_0_Pin|SETMODE_1_Pin|SETMODE_2_Pin|SETMODE_3_Pin
 80012d0:	2200      	movs	r2, #0
 80012d2:	f643 413e 	movw	r1, #15422	; 0x3c3e
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <MX_GPIO_Init+0xc0>)
 80012d8:	f000 fd09 	bl	8001cee <HAL_GPIO_WritePin>
                          |LED_RED_Pin|SETMODE_4_Pin|SETMODE_5_Pin|SETMODE_6_Pin
                          |SETMODE_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_0_Pin|LED_RED_1_Pin|LED_YELLOW_0_Pin|DUR_4_Pin
 80012dc:	2200      	movs	r2, #0
 80012de:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <MX_GPIO_Init+0xc4>)
 80012e4:	f000 fd03 	bl	8001cee <HAL_GPIO_WritePin>
                          |DUR_2_Pin|DUR_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SETMODE_0_Pin SETMODE_1_Pin SETMODE_2_Pin SETMODE_3_Pin
                           LED_RED_Pin SETMODE_4_Pin SETMODE_5_Pin SETMODE_6_Pin
                           SETMODE_7_Pin */
  GPIO_InitStruct.Pin = SETMODE_0_Pin|SETMODE_1_Pin|SETMODE_2_Pin|SETMODE_3_Pin
 80012e8:	f643 433e 	movw	r3, #15422	; 0x3c3e
 80012ec:	60bb      	str	r3, [r7, #8]
                          |LED_RED_Pin|SETMODE_4_Pin|SETMODE_5_Pin|SETMODE_6_Pin
                          |SETMODE_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2302      	movs	r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_GPIO_Init+0xc0>)
 8001302:	f000 fb63 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_0_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_0_Pin|BTN_1_Pin|BTN_2_Pin;
 8001306:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800130a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_GPIO_Init+0xc0>)
 800131c:	f000 fb56 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_0_Pin LED_RED_1_Pin LED_YELLOW_0_Pin DUR_4_Pin
                           DUR_5_Pin DUR_6_Pin DUR_7_Pin LED_YELLOW_1_Pin
                           LED_GREEN_0_Pin LED_GREEN_1_Pin DUR_0_Pin DUR_1_Pin
                           DUR_2_Pin DUR_3_Pin */
  GPIO_InitStruct.Pin = LED_RED_0_Pin|LED_RED_1_Pin|LED_YELLOW_0_Pin|DUR_4_Pin
 8001320:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001324:	60bb      	str	r3, [r7, #8]
                          |DUR_5_Pin|DUR_6_Pin|DUR_7_Pin|LED_YELLOW_1_Pin
                          |LED_GREEN_0_Pin|LED_GREEN_1_Pin|DUR_0_Pin|DUR_1_Pin
                          |DUR_2_Pin|DUR_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0308 	add.w	r3, r7, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_GPIO_Init+0xc4>)
 800133a:	f000 fb47 	bl	80019cc <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800
 8001350:	40010c00 	.word	0x40010c00

08001354 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	getKeyInput();
 800135c:	f7fe ff14 	bl	8000188 <getKeyInput>
	timerRun();
 8001360:	f000 f822 	bl	80013a8 <timerRun>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <setTimer>:
#include "software_timer.h"

int timer_flag[MAXTM] = {0};
int timer_counter[MAXTM]= {0};

void setTimer(int index, int counter){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001382:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <setTimer+0x28>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2100      	movs	r1, #0
 8001388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter;
 800138c:	4905      	ldr	r1, [pc, #20]	; (80013a4 <setTimer+0x2c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	2000009c 	.word	0x2000009c
 80013a4:	200000c4 	.word	0x200000c4

080013a8 <timerRun>:
void timerRun(){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAXTM; i++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e017      	b.n	80013e4 <timerRun+0x3c>
		if(timer_counter[i] > 0){
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <timerRun+0x50>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dd09      	ble.n	80013d4 <timerRun+0x2c>
			timer_counter[i]--;
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <timerRun+0x50>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c8:	1e5a      	subs	r2, r3, #1
 80013ca:	490b      	ldr	r1, [pc, #44]	; (80013f8 <timerRun+0x50>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80013d2:	e004      	b.n	80013de <timerRun+0x36>
			if(timer_counter <= 0){
				timer_flag[i] = 1;
			}
		}
		else{
			timer_flag[i] = 1;
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <timerRun+0x54>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2101      	movs	r1, #1
 80013da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAXTM; i++){
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3301      	adds	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	dde4      	ble.n	80013b4 <timerRun+0xc>
		}
	}
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200000c4 	.word	0x200000c4
 80013fc:	2000009c 	.word	0x2000009c

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_MspInit+0x5c>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_MspInit+0x5c>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6193      	str	r3, [r2, #24]
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_MspInit+0x5c>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x5c>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_MspInit+0x5c>)
 8001424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x5c>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_MspInit+0x60>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_MspInit+0x60>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000

08001464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001474:	d113      	bne.n	800149e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_TIM_Base_MspInit+0x44>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_TIM_Base_MspInit+0x44>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	61d3      	str	r3, [r2, #28]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_TIM_Base_MspInit+0x44>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	201c      	movs	r0, #28
 8001494:	f000 fa63 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001498:	201c      	movs	r0, #28
 800149a:	f000 fa7c 	bl	8001996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f2:	f000 f941 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM2_IRQHandler+0x10>)
 8001502:	f001 f89d 	bl	8002640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200000ec 	.word	0x200000ec

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <clearAllLed>:
 */

#include "traffic_light.h"


void clearAllLed(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2101      	movs	r1, #1
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <clearAllLed+0x44>)
 8001526:	f000 fbe2 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2102      	movs	r1, #2
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <clearAllLed+0x44>)
 8001530:	f000 fbdd 	bl	8001cee <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2108      	movs	r1, #8
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <clearAllLed+0x44>)
 800153a:	f000 fbd8 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2104      	movs	r1, #4
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <clearAllLed+0x44>)
 8001544:	f000 fbd3 	bl	8001cee <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2120      	movs	r1, #32
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <clearAllLed+0x44>)
 800154e:	f000 fbce 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2110      	movs	r1, #16
 8001556:	4802      	ldr	r0, [pc, #8]	; (8001560 <clearAllLed+0x44>)
 8001558:	f000 fbc9 	bl	8001cee <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40010c00 	.word	0x40010c00

08001564 <led_red_green>:
void led_red_green(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2101      	movs	r1, #1
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <led_red_green+0x1c>)
 800156e:	f000 fbbe 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2120      	movs	r1, #32
 8001576:	4802      	ldr	r0, [pc, #8]	; (8001580 <led_red_green+0x1c>)
 8001578:	f000 fbb9 	bl	8001cee <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40010c00 	.word	0x40010c00

08001584 <led_red_amber>:
void led_red_amber(){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin, SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2101      	movs	r1, #1
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <led_red_amber+0x1c>)
 800158e:	f000 fbae 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2108      	movs	r1, #8
 8001596:	4802      	ldr	r0, [pc, #8]	; (80015a0 <led_red_amber+0x1c>)
 8001598:	f000 fba9 	bl	8001cee <HAL_GPIO_WritePin>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010c00 	.word	0x40010c00

080015a4 <led_green_red>:
void led_green_red(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2102      	movs	r1, #2
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <led_green_red+0x1c>)
 80015ae:	f000 fb9e 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin, SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2110      	movs	r1, #16
 80015b6:	4802      	ldr	r0, [pc, #8]	; (80015c0 <led_green_red+0x1c>)
 80015b8:	f000 fb99 	bl	8001cee <HAL_GPIO_WritePin>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <led_amber_red>:
void led_amber_red(){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2102      	movs	r1, #2
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <led_amber_red+0x1c>)
 80015ce:	f000 fb8e 	bl	8001cee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin, SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2104      	movs	r1, #4
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <led_amber_red+0x1c>)
 80015d8:	f000 fb89 	bl	8001cee <HAL_GPIO_WritePin>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <controlTime_led>:

	clearAllLed();
	led_red_green();
	led_red_amber();
}
void controlTime_led(){
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	if(red <= 0)
 80015e8:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <controlTime_led+0x3c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dc03      	bgt.n	80015f8 <controlTime_led+0x14>
		red = temp_red;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <controlTime_led+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <controlTime_led+0x3c>)
 80015f6:	6013      	str	r3, [r2, #0]
	if(green <= 0)
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <controlTime_led+0x44>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	dc03      	bgt.n	8001608 <controlTime_led+0x24>
		green = temp_green;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <controlTime_led+0x48>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a08      	ldr	r2, [pc, #32]	; (8001628 <controlTime_led+0x44>)
 8001606:	6013      	str	r3, [r2, #0]
	if(amber <= 0)
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <controlTime_led+0x4c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dc03      	bgt.n	8001618 <controlTime_led+0x34>
		amber = temp_amber;
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <controlTime_led+0x50>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <controlTime_led+0x4c>)
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000034 	.word	0x20000034
 8001624:	20000040 	.word	0x20000040
 8001628:	2000003c 	.word	0x2000003c
 800162c:	20000048 	.word	0x20000048
 8001630:	20000038 	.word	0x20000038
 8001634:	20000044 	.word	0x20000044

08001638 <blinkingLed>:
void blinkingLed(int mode){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	switch(mode){
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d01b      	beq.n	800167e <blinkingLed+0x46>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b04      	cmp	r3, #4
 800164a:	dc21      	bgt.n	8001690 <blinkingLed+0x58>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <blinkingLed+0x22>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d009      	beq.n	800166c <blinkingLed+0x34>
			break;
		case MODE_4:
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
			break;
		default: break;
 8001658:	e01a      	b.n	8001690 <blinkingLed+0x58>
			HAL_GPIO_TogglePin(LED_RED_0_GPIO_Port, LED_RED_0_Pin);
 800165a:	2101      	movs	r1, #1
 800165c:	480f      	ldr	r0, [pc, #60]	; (800169c <blinkingLed+0x64>)
 800165e:	f000 fb5e 	bl	8001d1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8001662:	2102      	movs	r1, #2
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <blinkingLed+0x64>)
 8001666:	f000 fb5a 	bl	8001d1e <HAL_GPIO_TogglePin>
			break;
 800166a:	e012      	b.n	8001692 <blinkingLed+0x5a>
			HAL_GPIO_TogglePin(LED_YELLOW_0_GPIO_Port, LED_YELLOW_0_Pin);
 800166c:	2104      	movs	r1, #4
 800166e:	480b      	ldr	r0, [pc, #44]	; (800169c <blinkingLed+0x64>)
 8001670:	f000 fb55 	bl	8001d1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8001674:	2108      	movs	r1, #8
 8001676:	4809      	ldr	r0, [pc, #36]	; (800169c <blinkingLed+0x64>)
 8001678:	f000 fb51 	bl	8001d1e <HAL_GPIO_TogglePin>
			break;
 800167c:	e009      	b.n	8001692 <blinkingLed+0x5a>
			HAL_GPIO_TogglePin(LED_GREEN_0_GPIO_Port, LED_GREEN_0_Pin);
 800167e:	2110      	movs	r1, #16
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <blinkingLed+0x64>)
 8001682:	f000 fb4c 	bl	8001d1e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8001686:	2120      	movs	r1, #32
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <blinkingLed+0x64>)
 800168a:	f000 fb48 	bl	8001d1e <HAL_GPIO_TogglePin>
			break;
 800168e:	e000      	b.n	8001692 <blinkingLed+0x5a>
		default: break;
 8001690:	bf00      	nop
	}
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40010c00 	.word	0x40010c00

080016a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a0:	f7ff ff36 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a4:	480b      	ldr	r0, [pc, #44]	; (80016d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016a6:	490c      	ldr	r1, [pc, #48]	; (80016d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016bc:	4c09      	ldr	r4, [pc, #36]	; (80016e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f001 faf9 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ce:	f7ff fd3f 	bl	8001150 <main>
  bx lr
 80016d2:	4770      	bx	lr
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016dc:	08002d5c 	.word	0x08002d5c
  ldr r2, =_sbss
 80016e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016e4:	20000138 	.word	0x20000138

080016e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC1_2_IRQHandler>
	...

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_Init+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_Init+0x28>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f000 f923 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001702:	200f      	movs	r0, #15
 8001704:	f000 f808 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001708:	f7ff fe7a 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f93b 	bl	80019b2 <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f903 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000064 	.word	0x20000064
 8001770:	2000006c 	.word	0x2000006c
 8001774:	20000068 	.word	0x20000068

08001778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_IncTick+0x1c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_IncTick+0x20>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_IncTick+0x20>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	2000006c 	.word	0x2000006c
 8001798:	20000134 	.word	0x20000134

0800179c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <HAL_GetTick+0x10>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000134 	.word	0x20000134

080017b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017cc:	4013      	ands	r3, r2
 80017ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <__NVIC_SetPriorityGrouping+0x44>)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60d3      	str	r3, [r2, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <__NVIC_GetPriorityGrouping+0x18>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	f003 0307 	and.w	r3, r3, #7
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0b      	blt.n	800183e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4906      	ldr	r1, [pc, #24]	; (8001848 <__NVIC_EnableIRQ+0x34>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff90 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff2d 	bl	80017b0 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001970:	f7ff ff42 	bl	80017f8 <__NVIC_GetPriorityGrouping>
 8001974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	68b9      	ldr	r1, [r7, #8]
 800197a:	6978      	ldr	r0, [r7, #20]
 800197c:	f7ff ff90 	bl	80018a0 <NVIC_EncodePriority>
 8001980:	4602      	mov	r2, r0
 8001982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff5f 	bl	800184c <__NVIC_SetPriority>
}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff35 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffa2 	bl	8001904 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e148      	b.n	8001c72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e0:	2201      	movs	r2, #1
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8137 	bne.w	8001c6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4aa3      	ldr	r2, [pc, #652]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d05e      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a08:	4aa1      	ldr	r2, [pc, #644]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d875      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a0e:	4aa1      	ldr	r2, [pc, #644]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d058      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a14:	4a9f      	ldr	r2, [pc, #636]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d86f      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a1a:	4a9f      	ldr	r2, [pc, #636]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d052      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a20:	4a9d      	ldr	r2, [pc, #628]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d869      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a26:	4a9d      	ldr	r2, [pc, #628]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04c      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a2c:	4a9b      	ldr	r2, [pc, #620]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d863      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a32:	4a9b      	ldr	r2, [pc, #620]	; (8001ca0 <HAL_GPIO_Init+0x2d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d046      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a99      	ldr	r2, [pc, #612]	; (8001ca0 <HAL_GPIO_Init+0x2d4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d85d      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d82a      	bhi.n	8001a98 <HAL_GPIO_Init+0xcc>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d859      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_GPIO_Init+0x80>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001ac7 	.word	0x08001ac7
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001ab3 	.word	0x08001ab3
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001afb 	.word	0x08001afb
 8001a60:	08001afb 	.word	0x08001afb
 8001a64:	08001afb 	.word	0x08001afb
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001afb 	.word	0x08001afb
 8001a70:	08001afb 	.word	0x08001afb
 8001a74:	08001afb 	.word	0x08001afb
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001afb 	.word	0x08001afb
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001afb 	.word	0x08001afb
 8001a88:	08001afb 	.word	0x08001afb
 8001a8c:	08001afb 	.word	0x08001afb
 8001a90:	08001aa9 	.word	0x08001aa9
 8001a94:	08001abd 	.word	0x08001abd
 8001a98:	4a82      	ldr	r2, [pc, #520]	; (8001ca4 <HAL_GPIO_Init+0x2d8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9e:	e02c      	b.n	8001afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e029      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	3304      	adds	r3, #4
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e024      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e01f      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e01a      	b.n	8001afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e013      	b.n	8001afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	611a      	str	r2, [r3, #16]
          break;
 8001ae6:	e009      	b.n	8001afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	615a      	str	r2, [r3, #20]
          break;
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x130>
          break;
 8001afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d801      	bhi.n	8001b06 <HAL_GPIO_Init+0x13a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_Init+0x13e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d802      	bhi.n	8001b18 <HAL_GPIO_Init+0x14c>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x152>
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3b08      	subs	r3, #8
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	210f      	movs	r1, #15
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8090 	beq.w	8001c6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4c:	4b56      	ldr	r3, [pc, #344]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a55      	ldr	r2, [pc, #340]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b53      	ldr	r3, [pc, #332]	; (8001ca8 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b64:	4a51      	ldr	r2, [pc, #324]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <HAL_GPIO_Init+0x2e4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00d      	beq.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a48      	ldr	r2, [pc, #288]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d007      	beq.n	8001ba8 <HAL_GPIO_Init+0x1dc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_GPIO_Init+0x1d8>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x1e2>
 8001bac:	2300      	movs	r3, #0
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbe:	493b      	ldr	r1, [pc, #236]	; (8001cac <HAL_GPIO_Init+0x2e0>)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4937      	ldr	r1, [pc, #220]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001be6:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4933      	ldr	r1, [pc, #204]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	492d      	ldr	r1, [pc, #180]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4929      	ldr	r1, [pc, #164]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	4923      	ldr	r1, [pc, #140]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	491f      	ldr	r1, [pc, #124]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4919      	ldr	r1, [pc, #100]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4915      	ldr	r1, [pc, #84]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3301      	adds	r3, #1
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f aeaf 	bne.w	80019e0 <HAL_GPIO_Init+0x14>
  }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	372c      	adds	r7, #44	; 0x2c
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	10320000 	.word	0x10320000
 8001c94:	10310000 	.word	0x10310000
 8001c98:	10220000 	.word	0x10220000
 8001c9c:	10210000 	.word	0x10210000
 8001ca0:	10120000 	.word	0x10120000
 8001ca4:	10110000 	.word	0x10110000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	40010c00 	.word	0x40010c00
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	807b      	strh	r3, [r7, #2]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cfe:	787b      	ldrb	r3, [r7, #1]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d0a:	e003      	b.n	8001d14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	041a      	lsls	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d30:	887a      	ldrh	r2, [r7, #2]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	041a      	lsls	r2, r3, #16
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	400b      	ands	r3, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e26c      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8087 	beq.w	8001e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d70:	4b92      	ldr	r3, [pc, #584]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d00c      	beq.n	8001d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d7c:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 030c 	and.w	r3, r3, #12
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d112      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
 8001d88:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d06c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x12c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d168      	bne.n	8001e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e246      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x76>
 8001db8:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a7f      	ldr	r2, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	e02e      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x98>
 8001dce:	4b7b      	ldr	r3, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7a      	ldr	r2, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b78      	ldr	r3, [pc, #480]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a77      	ldr	r2, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0xbc>
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a71      	ldr	r2, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd4>
 8001e0c:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a6a      	ldr	r2, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a67      	ldr	r2, [pc, #412]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fcb6 	bl	800179c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fcb2 	bl	800179c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1fa      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0xe4>
 8001e52:	e014      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fca2 	bl	800179c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fc9e 	bl	800179c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1e6      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x10c>
 8001e7a:	e000      	b.n	8001e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d063      	beq.n	8001f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d11c      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
 8001ea2:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d001      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e1ba      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4939      	ldr	r1, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	e03a      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d020      	beq.n	8001f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fc57 	bl	800179c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fc53 	bl	800179c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e19b      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4927      	ldr	r1, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fc36 	bl	800179c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff fc32 	bl	800179c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e17a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d03a      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d019      	beq.n	8001f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6c:	f7ff fc16 	bl	800179c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff fc12 	bl	800179c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e15a      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x26c>)
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f000 fa9a 	bl	80024cc <RCC_Delay>
 8001f98:	e01c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7ff fbfc 	bl	800179c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa6:	e00f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa8:	f7ff fbf8 	bl	800179c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e140      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	42420000 	.word	0x42420000
 8001fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	4b9e      	ldr	r3, [pc, #632]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1e9      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 80a6 	beq.w	800212e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b97      	ldr	r3, [pc, #604]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a93      	ldr	r2, [pc, #588]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b8e      	ldr	r3, [pc, #568]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d118      	bne.n	800204c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201a:	4b8b      	ldr	r3, [pc, #556]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a8a      	ldr	r2, [pc, #552]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002026:	f7ff fbb9 	bl	800179c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7ff fbb5 	bl	800179c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b64      	cmp	r3, #100	; 0x64
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0fd      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x4f8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x312>
 8002054:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	e02d      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x334>
 800206a:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a75      	ldr	r2, [pc, #468]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a72      	ldr	r2, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	e01c      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x356>
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a6c      	ldr	r2, [pc, #432]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a69      	ldr	r2, [pc, #420]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e00b      	b.n	80020be <HAL_RCC_OscConfig+0x36e>
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a66      	ldr	r2, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b64      	ldr	r3, [pc, #400]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a63      	ldr	r2, [pc, #396]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d015      	beq.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c6:	f7ff fb69 	bl	800179c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff fb65 	bl	800179c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0ab      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCC_OscConfig+0x37e>
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff fb53 	bl	800179c <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff fb4f 	bl	800179c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e095      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b48      	ldr	r3, [pc, #288]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8081 	beq.w	800223a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d061      	beq.n	8002208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d146      	bne.n	80021da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff fb23 	bl	800179c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215a:	f7ff fb1f 	bl	800179c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e067      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002180:	d108      	bne.n	8002194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	492d      	ldr	r1, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a19      	ldr	r1, [r3, #32]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	430b      	orrs	r3, r1
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7ff faf3 	bl	800179c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff faef 	bl	800179c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e037      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x46a>
 80021d8:	e02f      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_RCC_OscConfig+0x4fc>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff fadc 	bl	800179c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff fad8 	bl	800179c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e020      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x498>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e013      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
 800224c:	42420060 	.word	0x42420060

08002250 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0d0      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 0207 	bic.w	r2, r3, #7
 800227a:	4965      	ldr	r1, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d040      	beq.n	8002370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d115      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e073      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06b      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f023 0203 	bic.w	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4936      	ldr	r1, [pc, #216]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7ff fa2c 	bl	800179c <HAL_GetTick>
 8002344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	e00a      	b.n	800235e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002348:	f7ff fa28 	bl	800179c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	; 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e053      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 020c 	and.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1eb      	bne.n	8002348 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d210      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4922      	ldr	r1, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490a      	ldr	r1, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1cc>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f98a 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40022000 	.word	0x40022000
 8002414:	40021000 	.word	0x40021000
 8002418:	08002d30 	.word	0x08002d30
 800241c:	20000064 	.word	0x20000064
 8002420:	20000068 	.word	0x20000068

08002424 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800243e:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b04      	cmp	r3, #4
 800244c:	d002      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x30>
 800244e:	2b08      	cmp	r3, #8
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x36>
 8002452:	e027      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002456:	613b      	str	r3, [r7, #16]
      break;
 8002458:	e027      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	0c9b      	lsrs	r3, r3, #18
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	0c5b      	lsrs	r3, r3, #17
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002486:	fb02 f203 	mul.w	r2, r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e004      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	613b      	str	r3, [r7, #16]
      break;
 80024a2:	e002      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetSysClockFreq+0x98>)
 80024a6:	613b      	str	r3, [r7, #16]
      break;
 80024a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024aa:	693b      	ldr	r3, [r7, #16]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	007a1200 	.word	0x007a1200
 80024c0:	08002d40 	.word	0x08002d40
 80024c4:	08002d50 	.word	0x08002d50
 80024c8:	003d0900 	.word	0x003d0900

080024cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <RCC_Delay+0x34>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <RCC_Delay+0x38>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e8:	bf00      	nop
  }
  while (Delay --);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f9      	bne.n	80024e8 <RCC_Delay+0x1c>
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	20000064 	.word	0x20000064
 8002504:	10624dd3 	.word	0x10624dd3

08002508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e041      	b.n	800259e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe ff98 	bl	8001464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f000 fa56 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d001      	beq.n	80025c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e035      	b.n	800262c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a16      	ldr	r2, [pc, #88]	; (8002638 <HAL_TIM_Base_Start_IT+0x90>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_TIM_Base_Start_IT+0x4e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d004      	beq.n	80025f6 <HAL_TIM_Base_Start_IT+0x4e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a12      	ldr	r2, [pc, #72]	; (800263c <HAL_TIM_Base_Start_IT+0x94>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d111      	bne.n	800261a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d010      	beq.n	800262a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002618:	e007      	b.n	800262a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f042 0201 	orr.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40000400 	.word	0x40000400

08002640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d020      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0202 	mvn.w	r2, #2
 8002674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f998 	bl	80029c0 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f98b 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f99a 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0304 	and.w	r3, r3, #4
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d020      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0204 	mvn.w	r2, #4
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f972 	bl	80029c0 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f965 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f974 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d020      	beq.n	800273c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0208 	mvn.w	r2, #8
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f94c 	bl	80029c0 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f93f 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f94e 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d020      	beq.n	8002788 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01b      	beq.n	8002788 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0210 	mvn.w	r2, #16
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2208      	movs	r2, #8
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f926 	bl	80029c0 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f919 	bl	80029ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f928 	bl	80029d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0201 	mvn.w	r2, #1
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fdd4 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa6f 	bl	8002cae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f8f8 	bl	80029e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0220 	mvn.w	r2, #32
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa42 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_TIM_ConfigClockSource+0x1c>
 8002838:	2302      	movs	r3, #2
 800283a:	e0b4      	b.n	80029a6 <HAL_TIM_ConfigClockSource+0x186>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800285a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002874:	d03e      	beq.n	80028f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287a:	f200 8087 	bhi.w	800298c <HAL_TIM_ConfigClockSource+0x16c>
 800287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002882:	f000 8086 	beq.w	8002992 <HAL_TIM_ConfigClockSource+0x172>
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d87f      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b70      	cmp	r3, #112	; 0x70
 800288e:	d01a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d87b      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b60      	cmp	r3, #96	; 0x60
 8002896:	d050      	beq.n	800293a <HAL_TIM_ConfigClockSource+0x11a>
 8002898:	2b60      	cmp	r3, #96	; 0x60
 800289a:	d877      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 800289c:	2b50      	cmp	r3, #80	; 0x50
 800289e:	d03c      	beq.n	800291a <HAL_TIM_ConfigClockSource+0xfa>
 80028a0:	2b50      	cmp	r3, #80	; 0x50
 80028a2:	d873      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d058      	beq.n	800295a <HAL_TIM_ConfigClockSource+0x13a>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d86f      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 80028ac:	2b30      	cmp	r3, #48	; 0x30
 80028ae:	d064      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x15a>
 80028b0:	2b30      	cmp	r3, #48	; 0x30
 80028b2:	d86b      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 80028b4:	2b20      	cmp	r3, #32
 80028b6:	d060      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x15a>
 80028b8:	2b20      	cmp	r3, #32
 80028ba:	d867      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d05c      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x15a>
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d05a      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x15a>
 80028c4:	e062      	b.n	800298c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f000 f96a 	bl	8002bae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	609a      	str	r2, [r3, #8]
      break;
 80028f2:	e04f      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6899      	ldr	r1, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f000 f953 	bl	8002bae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002916:	609a      	str	r2, [r3, #8]
      break;
 8002918:	e03c      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	461a      	mov	r2, r3
 8002928:	f000 f8ca 	bl	8002ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2150      	movs	r1, #80	; 0x50
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f921 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 8002938:	e02c      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	461a      	mov	r2, r3
 8002948:	f000 f8e8 	bl	8002b1c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2160      	movs	r1, #96	; 0x60
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f911 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 8002958:	e01c      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	461a      	mov	r2, r3
 8002968:	f000 f8aa 	bl	8002ac0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2140      	movs	r1, #64	; 0x40
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f901 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 8002978:	e00c      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f000 f8f8 	bl	8002b7a <TIM_ITRx_SetConfig>
      break;
 800298a:	e003      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      break;
 8002990:	e000      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a2b      	ldr	r2, [pc, #172]	; (8002ab8 <TIM_Base_SetConfig+0xc0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d007      	beq.n	8002a20 <TIM_Base_SetConfig+0x28>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d003      	beq.n	8002a20 <TIM_Base_SetConfig+0x28>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a28      	ldr	r2, [pc, #160]	; (8002abc <TIM_Base_SetConfig+0xc4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d108      	bne.n	8002a32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <TIM_Base_SetConfig+0xc0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d007      	beq.n	8002a4a <TIM_Base_SetConfig+0x52>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d003      	beq.n	8002a4a <TIM_Base_SetConfig+0x52>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <TIM_Base_SetConfig+0xc4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d108      	bne.n	8002a5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <TIM_Base_SetConfig+0xc0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d103      	bne.n	8002a90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f023 0201 	bic.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]
  }
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400

08002ac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0201 	bic.w	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f023 030a 	bic.w	r3, r3, #10
 8002afc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0210 	bic.w	r2, r3, #16
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	031b      	lsls	r3, r3, #12
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	621a      	str	r2, [r3, #32]
}
 8002b70:	bf00      	nop
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f043 0307 	orr.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	609a      	str	r2, [r3, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	021a      	lsls	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	609a      	str	r2, [r3, #8]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e041      	b.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d009      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d004      	beq.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a10      	ldr	r2, [pc, #64]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10c      	bne.n	8002c76 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	2600      	movs	r6, #0
 8002cc4:	4d0c      	ldr	r5, [pc, #48]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc6:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc8:	1b64      	subs	r4, r4, r5
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	42a6      	cmp	r6, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	f000 f822 	bl	8002d18 <_init>
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	4d0a      	ldr	r5, [pc, #40]	; (8002d00 <__libc_init_array+0x40>)
 8002cd8:	4c0a      	ldr	r4, [pc, #40]	; (8002d04 <__libc_init_array+0x44>)
 8002cda:	1b64      	subs	r4, r4, r5
 8002cdc:	10a4      	asrs	r4, r4, #2
 8002cde:	42a6      	cmp	r6, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce8:	4798      	blx	r3
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf2:	4798      	blx	r3
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08002d54 	.word	0x08002d54
 8002cfc:	08002d54 	.word	0x08002d54
 8002d00:	08002d54 	.word	0x08002d54
 8002d04:	08002d58 	.word	0x08002d58

08002d08 <memset>:
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4402      	add	r2, r0
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	f803 1b01 	strb.w	r1, [r3], #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
